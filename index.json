[{"content":"#code smell\n###〇Bloaters\n・長い関数(Long Method)\nオブジェクトそのものの受け渡し、関数の抽出、コマンドによる関数の置き換え、問い合わせによる一時変数の置き換え、 条件記述の分解、パラメータオブジェクトの導入、ポリモーフィズムによる条件記述の置き換え、ループの分離 ・巨大なクラス(Large Class)\nクラスの抽出、サブクスによるタイプコードの置き換え、スーパークラスの抽出 ・データの群れ(Data Clumps)\nオブジェクトそのものの受け渡し、クラスの抽出、パラメータオブジェクトの導入 ・長いパラメータリスト(Long Parameter List)\nオブジェクトそのものの受け渡し、関数群のクラスへの集約、問い合わせによるパラメータの置き換え、 パラメータオブジェクトの導入、フラグパラメータの削除 ・基本データ型への執着(Primitive Obsession)\nオブジェクトによるプリミティブの置き換え、クラスの抽出、サブクラスによるタイプコードの置き換え、 パラメータオブジェクトの導入、ポリモーフィズムによる条件記述の置き換え\n###〇Tool Abusers\n・Switch Statements\n・相続拒否(Refused Bequest)\n委譲によるサブクラスの置き換え、委譲によるスーパークラスの置き換え、フィールドの押し下げ、メソッドの押し下げ ・クラスのインターフェース不一致(Alternative Classes w/ Different Interfaces)\n関数宣言の変更、関数の移動、スーパークラスの抽出 ・一時的属性(Temporary Field)\n関数の移動、クラスの抽出、特殊ケースの導入\n###〇Change Preventers\n・Divergent Change\n・変更の分散(Shotgun Surgery)\n関数群のクラスへの集約、関数群の変換への集約、関数の移動、関数のインライン化、クラスのインライン化、フィールドの移動、フェーズの分離 ・Parallel Inheritance Hierarchies\n###〇Dispensables\n・Lazy Class\n・疑わしき一般化(Speculative Generality)\n関数宣言の変更、関数のインライン化、クラス階層の平坦化、クラスのインライン化、デッドコードの削除\n・データクラス(Data Class)\n・重複したコード(Duplicated Code)\n関数の抽出、ステートメントのスライド、メソッドの引き上げ\n###〇Couplers\n・特性の横恋慕(Feature Envy)\n関数の移動、関数の抽出\n・Inappropriate Intimacy\n・メッセージの連鎖(Message Chains)\n委譲の隠蔽、関数の移動、関数の抽出\n・仲介人(Middle Man)\n関数のインライン化、仲介人の除去\nComent(コメント)\nアサーションの導入、関数宣言の変更、関数の抽出\nMysterious Name(不可思議な名前)\n関数宣言の変更、フィールド名の変更、変数名の変更\nGlobal Data(グローバルなデータ)\n変数のカプセル化\nMutable Data(変更可能なデータ)\nsetter の削除、関数群のクラスへの集約、関数群の変換への集約、関数の抽出、参照から値への変更、\nステートメントのスライド、問い合わせと更新の分離、問い合わせによる導入変数の置き換え、変数のカプセル化、変数の分離\nDivergent Change(変更の偏り)\nRepeated Switches(重複したスイッチ文)\nポリモーフィズムによる条件記述の置き換え\nLoop(ループ)\nパイプラインによるループの置き換え\nLazy Element(怠け者要素)\n関数のインライン化、クラス階層の平坦化、クラスのインライン化\nInsider Trading(インサイダー取引)\n委譲によるサブクラスの置き換え、委譲によるスーパークラスの置き換え、委譲の隠匿\n関数の移動、フィールドの移動\n","permalink":"https://hirotoshimizu.github.io/posts/code-smells/","summary":"#code smell\n###〇Bloaters\n・長い関数(Long Method)\nオブジェクトそのものの受け渡し、関数の抽出、コマンドによる関数の置き換え、問い合わせによる一時変数の置き換え、 条件記述の分解、パラメータオブジェクトの導入、ポリモーフィズムによる条件記述の置き換え、ループの分離 ・巨大なクラス(Large Class)\nクラスの抽出、サブクスによるタイプコードの置き換え、スーパークラスの抽出 ・データの群れ(Data Clumps)\nオブジェクトそのものの受け渡し、クラスの抽出、パラメータオブジェクトの導入 ・長いパラメータリスト(Long Parameter List)\nオブジェクトそのものの受け渡し、関数群のクラスへの集約、問い合わせによるパラメータの置き換え、 パラメータオブジェクトの導入、フラグパラメータの削除 ・基本データ型への執着(Primitive Obsession)\nオブジェクトによるプリミティブの置き換え、クラスの抽出、サブクラスによるタイプコードの置き換え、 パラメータオブジェクトの導入、ポリモーフィズムによる条件記述の置き換え\n###〇Tool Abusers\n・Switch Statements\n・相続拒否(Refused Bequest)\n委譲によるサブクラスの置き換え、委譲によるスーパークラスの置き換え、フィールドの押し下げ、メソッドの押し下げ ・クラスのインターフェース不一致(Alternative Classes w/ Different Interfaces)\n関数宣言の変更、関数の移動、スーパークラスの抽出 ・一時的属性(Temporary Field)\n関数の移動、クラスの抽出、特殊ケースの導入\n###〇Change Preventers\n・Divergent Change\n・変更の分散(Shotgun Surgery)\n関数群のクラスへの集約、関数群の変換への集約、関数の移動、関数のインライン化、クラスのインライン化、フィールドの移動、フェーズの分離 ・Parallel Inheritance Hierarchies\n###〇Dispensables\n・Lazy Class\n・疑わしき一般化(Speculative Generality)\n関数宣言の変更、関数のインライン化、クラス階層の平坦化、クラスのインライン化、デッドコードの削除\n・データクラス(Data Class)\n・重複したコード(Duplicated Code)\n関数の抽出、ステートメントのスライド、メソッドの引き上げ\n###〇Couplers\n・特性の横恋慕(Feature Envy)\n関数の移動、関数の抽出\n・Inappropriate Intimacy\n・メッセージの連鎖(Message Chains)\n委譲の隠蔽、関数の移動、関数の抽出\n・仲介人(Middle Man)","title":"Code Smells"},{"content":"https://leetcode.com/problems/longest-palindromic-substring/\nclass Solution: def longestPalindrome(self, s: str) -\u0026gt; str: res = \u0026#39;\u0026#39; for i in range(len(s)): # odd case tmp = self.helper(s, i, i) if len(tmp) \u0026gt; len(res): res = tmp # even tmp = self.helper(s, i, i+1) if len(tmp) \u0026gt; len(res): res = tmp return res def helper(self, s, l, r): while l \u0026gt;= 0 and r \u0026lt; len(s) and s[l] == s[r]: l -= 1 r += 1 return s[l+1:r] ","permalink":"https://hirotoshimizu.github.io/posts/longest-palindromic-substring/","summary":"https://leetcode.com/problems/longest-palindromic-substring/\nclass Solution: def longestPalindrome(self, s: str) -\u0026gt; str: res = \u0026#39;\u0026#39; for i in range(len(s)): # odd case tmp = self.helper(s, i, i) if len(tmp) \u0026gt; len(res): res = tmp # even tmp = self.helper(s, i, i+1) if len(tmp) \u0026gt; len(res): res = tmp return res def helper(self, s, l, r): while l \u0026gt;= 0 and r \u0026lt; len(s) and s[l] == s[r]: l -= 1 r += 1 return s[l+1:r] ","title":"Longest Palindromic Substring"},{"content":"https://leetcode.com/problems/longest-increasing-subsequence/\nLIS はどんな場合でも最低1になるので、 1を入れた、list を作る。\nreverse order でループし、 ネストしたループで最初にループしている i 以降の数と比較する。\nnums[i] と nums[j] で nums[i] が小さい場合、 subsequence となるので、 LIS[i] に max(LIS[i], 1 + LIS[j]) を入れる。 j は i 以降の数字を見ているので、max()を使わないと LISの最後の 1 で置き換えて 2 となってしまうので注意。\nclass Solution: def lengthOfLIS(self, nums: List[int]) -\u0026gt; int: LIS = [1] * len(nums) for i in range(len(nums) - 1, -1, -1): for j in range(i + 1, len(nums)): if nums[i] \u0026lt; nums[j]: LIS[i] = max(LIS[i], 1 + LIS[j]) return max(LIS) ","permalink":"https://hirotoshimizu.github.io/posts/longest-increasing-subsequence/","summary":"https://leetcode.com/problems/longest-increasing-subsequence/\nLIS はどんな場合でも最低1になるので、 1を入れた、list を作る。\nreverse order でループし、 ネストしたループで最初にループしている i 以降の数と比較する。\nnums[i] と nums[j] で nums[i] が小さい場合、 subsequence となるので、 LIS[i] に max(LIS[i], 1 + LIS[j]) を入れる。 j は i 以降の数字を見ているので、max()を使わないと LISの最後の 1 で置き換えて 2 となってしまうので注意。\nclass Solution: def lengthOfLIS(self, nums: List[int]) -\u0026gt; int: LIS = [1] * len(nums) for i in range(len(nums) - 1, -1, -1): for j in range(i + 1, len(nums)): if nums[i] \u0026lt; nums[j]: LIS[i] = max(LIS[i], 1 + LIS[j]) return max(LIS) ","title":"Longest Increasing Subsequence"},{"content":"https://leetcode.com/problems/longest-common-subsequence/\n2d grid を作る。 row, col にそれぞれ、1行、1列追加して 0 を入れる。\ngrid の右下からループし、 縦横が同じ文字でマッチしたら、斜め左上に進む。 その際に1を足す。\nマッチしなかったら、右横か下のどちらか大きい数字を入れる。\nループが終わりgrid[0][0] の箇所に 1番長い subsequence の数が入る。\nclass Solution: def longestCommonSubsequence(self, text1: str, text2: str) -\u0026gt; int: dp = [[0 for j in range(len(text2) + 1)] for i in range(len(text1) + 1)] for i in range(len(text1) - 1, -1, -1): for j in range(len(text2) - 1, -1, -1): if text1[i] == text2[j]: dp[i][j] = 1 + dp[i + 1][j + 1] else: dp[i][j] = max(dp[i + 1][j], dp[i][j + 1]) return dp[0][0] ","permalink":"https://hirotoshimizu.github.io/posts/longest-common-subsequence/","summary":"https://leetcode.com/problems/longest-common-subsequence/\n2d grid を作る。 row, col にそれぞれ、1行、1列追加して 0 を入れる。\ngrid の右下からループし、 縦横が同じ文字でマッチしたら、斜め左上に進む。 その際に1を足す。\nマッチしなかったら、右横か下のどちらか大きい数字を入れる。\nループが終わりgrid[0][0] の箇所に 1番長い subsequence の数が入る。\nclass Solution: def longestCommonSubsequence(self, text1: str, text2: str) -\u0026gt; int: dp = [[0 for j in range(len(text2) + 1)] for i in range(len(text1) + 1)] for i in range(len(text1) - 1, -1, -1): for j in range(len(text2) - 1, -1, -1): if text1[i] == text2[j]: dp[i][j] = 1 + dp[i + 1][j + 1] else: dp[i][j] = max(dp[i + 1][j], dp[i][j + 1]) return dp[0][0] ","title":"Longest Common Subsequence"},{"content":" F / \\ B G / \\ \\ A D I / \\ / C E H  Pre-order Traversal root left subtree right subtree\nF B A D C E G I H\nhttps://leetcode.com/problems/binary-tree-preorder-traversal/\nIterative approach\nclass Solution(object): def preorderTraversal(self, root: Optional[TreeNode]) -\u0026gt; List[int]: \u0026#34;\u0026#34;\u0026#34; :type root: TreeNode :rtype: List[int] \u0026#34;\u0026#34;\u0026#34; res, stack = [], [(root, False)] while stack: node, visited = stack.pop() if node: if visited: res.append(node.val) else: stack.append((node.right, False)) stack.append((node.left, False)) stack.append((node, True)) return res Recursive solution\nclass Solution: def preorderTraversal(self, root: Optional[TreeNode]) -\u0026gt; List[int]: if root is None: return [] return [root.val] + self.preorderTraversal(root.left) + self.preorderTraversal(root.right) In-order Traversal left subtree root right subtree\nA B C D E F G H I\nhttps://leetcode.com/problems/binary-tree-inorder-traversal/\nIterative approach\nclass Solution(object): def inorderTraversal(self, root): \u0026#34;\u0026#34;\u0026#34; :type root: TreeNode :rtype: List[int] \u0026#34;\u0026#34;\u0026#34; res, stack = [], [(root, False)] while stack: node, visited = stack.pop() if node: if visited: res.append(node.val) else: stack.append((node.right, False)) stack.append((node, True)) stack.append((node.left, False)) return res Recursive solution\nPost-order Traversal left subtree right subtree root\nA C E D B H I G F\nIterative approach\nclass Solution(object): def inorderTraversal(self, root): \u0026#34;\u0026#34;\u0026#34; :type root: TreeNode :rtype: List[int] \u0026#34;\u0026#34;\u0026#34; res, stack = [], [(root, False)] while stack: node, visited = stack.pop() if node: if visited: res.append(node.val) else: stack.append((node, True)) stack.append((node.right, False)) stack.append((node.left, False)) return res Recursive solution\n","permalink":"https://hirotoshimizu.github.io/posts/traverse-a-tree/","summary":"F / \\ B G / \\ \\ A D I / \\ / C E H  Pre-order Traversal root left subtree right subtree\nF B A D C E G I H\nhttps://leetcode.com/problems/binary-tree-preorder-traversal/\nIterative approach\nclass Solution(object): def preorderTraversal(self, root: Optional[TreeNode]) -\u0026gt; List[int]: \u0026#34;\u0026#34;\u0026#34; :type root: TreeNode :rtype: List[int] \u0026#34;\u0026#34;\u0026#34; res, stack = [], [(root, False)] while stack: node, visited = stack.pop() if node: if visited: res.append(node.val) else: stack.","title":"Traverse a Tree"},{"content":"https://leetcode.com/problems/search-insert-position/\nalgorithm の runtime は O(log n) である必要があるため、 binary search で target の数の位置を調べる。\n変数 left に 0、 right に len(nums) - 1 を設定する。\n(left + right) // 2 で真ん中の値が取得出来るので、 真ん中の位置を mid とする。\nnums の mid の値が target なら、mid の index の値を返す。 もし、target の値が mid より大きい場合、 left を mid + 1 にする。 target の値が mid より小さい場合、 right を mid - 1 にする。\n[1, 3, 5, 6] で target = 2 の場合、\n[1, 3, 5, 6] l m r\ntargetの2 は nums[mid]より小さいので、 r の位置が、 mid - 1 のため、一番左になる。 [1, 3, 5, 6] l m r\n次のループで mid の位置が(0 + 0) // 2 で 0 になる。 target が nums[mid] より大きいので、 left の位置を +1 して右にずらす。 [1, 3, 5, 6] r l m\nleft が right の場所を超えたので、 この時点でループを抜け、left を return する。\nclass Solution: def searchInsert(self, nums: List[int], target: int) -\u0026gt; int: left, right = 0, len(nums) - 1 while left \u0026lt;= right: mid = (left + right) // 2 if target == nums[mid]: return mid if target \u0026gt; nums[mid]: left = mid + 1 else: right = mid - 1 return left ","permalink":"https://hirotoshimizu.github.io/posts/search-insert-position/","summary":"https://leetcode.com/problems/search-insert-position/\nalgorithm の runtime は O(log n) である必要があるため、 binary search で target の数の位置を調べる。\n変数 left に 0、 right に len(nums) - 1 を設定する。\n(left + right) // 2 で真ん中の値が取得出来るので、 真ん中の位置を mid とする。\nnums の mid の値が target なら、mid の index の値を返す。 もし、target の値が mid より大きい場合、 left を mid + 1 にする。 target の値が mid より小さい場合、 right を mid - 1 にする。\n[1, 3, 5, 6] で target = 2 の場合、","title":"Search Insert Position"},{"content":"nums = [0,0,1,1,1,2,2,3,3,4] の重複をなくすようにするので、下記のようになる。\nnums = [0,1,2,3,4,,,,,_]\npointer を 2つ使う。\n最初の数字は必ずユニークになるので、 left = 1　とする。\nright は for でループさせながら icrement していく。\nnon-decreasing order なので、 right の値と right - 1　を比較して、 違う値なら一番初めに現れるユニークの数字だとわかる。\nそのためその数字を left pointer がある位置に入れる。 その後、 left pointer をicrementする。\n最終的に left pointer の位置がユニークな数の出現回数となるので、 その値を return する。\nclass Solution: def removeDuplicates(self, nums: List[int]) -\u0026gt; int: left = 1 for right in range(1, len(nums)): if nums[right] != nums[right - 1]: nums[left] = nums[right] left += 1 return left ","permalink":"https://hirotoshimizu.github.io/posts/remove-duplicates-from-sorted-array/","summary":"nums = [0,0,1,1,1,2,2,3,3,4] の重複をなくすようにするので、下記のようになる。\nnums = [0,1,2,3,4,,,,,_]\npointer を 2つ使う。\n最初の数字は必ずユニークになるので、 left = 1　とする。\nright は for でループさせながら icrement していく。\nnon-decreasing order なので、 right の値と right - 1　を比較して、 違う値なら一番初めに現れるユニークの数字だとわかる。\nそのためその数字を left pointer がある位置に入れる。 その後、 left pointer をicrementする。\n最終的に left pointer の位置がユニークな数の出現回数となるので、 その値を return する。\nclass Solution: def removeDuplicates(self, nums: List[int]) -\u0026gt; int: left = 1 for right in range(1, len(nums)): if nums[right] != nums[right - 1]: nums[left] = nums[right] left += 1 return left ","title":"Remove Duplicates From Sorted Array"},{"content":"sentinel ノードは Linked List を空にせず、ヘッドレスにしないようにする。\nアルゴリズムは\nsentinel ノードをセットする。\ncurr と prev のポインターを設定する。\ncurr が null でない場合、ループする。\ncurr.val が 削除する値の場合、\nclass Solution: def removeElements(self, head: Optional[ListNode], val: int) -\u0026gt; Optional[ListNode]: sentinel = ListNode(next=head) prev, curr = sentinel, head while curr: if curr.val == val: prev.next = curr.next else: prev = curr curr = curr.next return sentinel.next ","permalink":"https://hirotoshimizu.github.io/posts/remove-linked-list-elements/","summary":"sentinel ノードは Linked List を空にせず、ヘッドレスにしないようにする。\nアルゴリズムは\nsentinel ノードをセットする。\ncurr と prev のポインターを設定する。\ncurr が null でない場合、ループする。\ncurr.val が 削除する値の場合、\nclass Solution: def removeElements(self, head: Optional[ListNode], val: int) -\u0026gt; Optional[ListNode]: sentinel = ListNode(next=head) prev, curr = sentinel, head while curr: if curr.val == val: prev.next = curr.next else: prev = curr curr = curr.next return sentinel.next ","title":"Remove Linked List Elements"},{"content":"https://leetcode.com/problems/path-sum/solution/\nノードがリーフでない場合は、子に対してhasPathSumメソッドを再帰的に呼び出し、合計を現在のノードの値だけ減らす。\nノードがリーフの場合、現在の合計がゼロであるかどうか、つまり最初の合計が検出されたかどうかを確認します。\nBase case は、root が none ということはリーフの下の node を確認してるので、sum が 0 になっていないので False を返す。\nclass Solution: def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -\u0026gt; bool: if not root: return False targetSum -= root.val if not root.left and not root.right: # if reach a leaf return targetSum == 0 return self.hasPathSum(root.left, targetSum) or self.hasPathSum(root.right, targetSum) ","permalink":"https://hirotoshimizu.github.io/posts/path-sum/","summary":"https://leetcode.com/problems/path-sum/solution/\nノードがリーフでない場合は、子に対してhasPathSumメソッドを再帰的に呼び出し、合計を現在のノードの値だけ減らす。\nノードがリーフの場合、現在の合計がゼロであるかどうか、つまり最初の合計が検出されたかどうかを確認します。\nBase case は、root が none ということはリーフの下の node を確認してるので、sum が 0 になっていないので False を返す。\nclass Solution: def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -\u0026gt; bool: if not root: return False targetSum -= root.val if not root.left and not root.right: # if reach a leaf return targetSum == 0 return self.hasPathSum(root.left, targetSum) or self.hasPathSum(root.right, targetSum) ","title":"Path Sum"},{"content":"https://leetcode.com/problems/isomorphic-strings/\ns と t をマッピングして考える。 この際、同じ文字なのに違う文字がマッピングされる場合\nisomorphic にならない。\nex. foo bar\n | f → b | | o → a | | o → r |  | b → f | | a → o | | r → o | o が a と r にマッピングされているので、 isomorphic にならず、false になる。\nclass Solution: def isIsomorphic(self, s: str, t: str) -\u0026gt; bool: mapST, mapTS = {}, {} for c1, c2 in zip(s, t): if((c1 in mapST and mapST[c1] != c2) or (c2 in mapTS and mapTS[c2] != c1)): return False mapST[c1] = c2 mapTS[c2] = c1 return True ","permalink":"https://hirotoshimizu.github.io/posts/isomorphic-strings/","summary":"https://leetcode.com/problems/isomorphic-strings/\ns と t をマッピングして考える。 この際、同じ文字なのに違う文字がマッピングされる場合\nisomorphic にならない。\nex. foo bar\n | f → b | | o → a | | o → r |  | b → f | | a → o | | r → o | o が a と r にマッピングされているので、 isomorphic にならず、false になる。\nclass Solution: def isIsomorphic(self, s: str, t: str) -\u0026gt; bool: mapST, mapTS = {}, {} for c1, c2 in zip(s, t): if((c1 in mapST and mapST[c1] !","title":"Isomorphic Strings"},{"content":"https://leetcode.com/problems/min-stack/solution/\n2つの stack を使う。 1つ目の stack は普通のstackを使うように扱う。(Stack) 2つ目の stack は現在の minimum をトラックするのに使う。(MinStack)\nMinStack の pushメソッドは現在の値が stack の top より小さい場合、 push される。\npopメソッドは Stack のみからpopすると MinStack と合わなくなるので、 If top of main_stack == top of min_tracker_stack: min_tracker_stack.pop() の処理が必要になる。\nclass MinStack: def __init__(self): self.stack = [] self.min_stack = [] def push(self, x: int) -\u0026gt; None: self.stack.append(x) if not self.min_stack or x \u0026lt;= self.min_stack[-1]: self.min_stack.append(x) def pop(self) -\u0026gt; None: if self.min_stack[-1] == self.stack[-1]: self.min_stack.pop() self.stack.pop() def top(self) -\u0026gt; int: return self.stack[-1] def getMin(self) -\u0026gt; int: return self.min_stack[-1] ","permalink":"https://hirotoshimizu.github.io/posts/min-stack/","summary":"https://leetcode.com/problems/min-stack/solution/\n2つの stack を使う。 1つ目の stack は普通のstackを使うように扱う。(Stack) 2つ目の stack は現在の minimum をトラックするのに使う。(MinStack)\nMinStack の pushメソッドは現在の値が stack の top より小さい場合、 push される。\npopメソッドは Stack のみからpopすると MinStack と合わなくなるので、 If top of main_stack == top of min_tracker_stack: min_tracker_stack.pop() の処理が必要になる。\nclass MinStack: def __init__(self): self.stack = [] self.min_stack = [] def push(self, x: int) -\u0026gt; None: self.stack.append(x) if not self.min_stack or x \u0026lt;= self.min_stack[-1]: self.min_stack.append(x) def pop(self) -\u0026gt; None: if self.min_stack[-1] == self.stack[-1]: self.min_stack.pop() self.","title":"Min Stack"},{"content":"anagram かどうかを調べるには s, t の出現する文字のカウントが同じなら anagram と言える。\n回答方法は\n 文字数をカウントし、s と t を比較する 文字数をカウントし、s と t を比較する(Counter を使う) sorted を使う  Input: s = \u0026ldquo;anagram\u0026rdquo;, t = \u0026ldquo;nagaram\u0026rdquo;\n 文字数をカウントし、s と t を比較する  class Solution: def isAnagram(self, s: str, t: str) -\u0026gt; bool: if len(s)!= len(t): return False count_s, count_t = {}, {} for i in range(len(s)): count_s[s[i]] = 1 + count_s.get(s[i], 0) count_t[t[i]] = 1 + count_t.get(t[i], 0) for c in count_s: if count_s[c] != count_t.get(c, 0): return False return True 文字数をカウントし、s と t を比較する(Counter を使う)  Counter を使うことにより、 {\u0026lsquo;a\u0026rsquo;: 3, \u0026lsquo;n\u0026rsquo;: 1, \u0026lsquo;g\u0026rsquo;: 1, \u0026lsquo;r\u0026rsquo;: 1, \u0026lsquo;m\u0026rsquo;: 1} 出現文字とその回数を取得できる。\nそのため anagram であれば true が返る。\nclass Solution: def isAnagram(self, s: str, t: str) -\u0026gt; bool: return Counter(s) == Counter(t) sorted を使う  sorted を使うことにより、 s, t が [\u0026lsquo;a\u0026rsquo;, \u0026lsquo;a\u0026rsquo;, \u0026lsquo;a\u0026rsquo;, \u0026lsquo;g\u0026rsquo;, \u0026lsquo;m\u0026rsquo;, \u0026lsquo;n\u0026rsquo;, \u0026lsquo;r\u0026rsquo;] と sort される。\nそのため anagram であれば true が返る。\nclass Solution: def isAnagram(self, s: str, t: str) -\u0026gt; bool: return sorted(s) == sorted(t) ","permalink":"https://hirotoshimizu.github.io/posts/valid-anagram/","summary":"anagram かどうかを調べるには s, t の出現する文字のカウントが同じなら anagram と言える。\n回答方法は\n 文字数をカウントし、s と t を比較する 文字数をカウントし、s と t を比較する(Counter を使う) sorted を使う  Input: s = \u0026ldquo;anagram\u0026rdquo;, t = \u0026ldquo;nagaram\u0026rdquo;\n 文字数をカウントし、s と t を比較する  class Solution: def isAnagram(self, s: str, t: str) -\u0026gt; bool: if len(s)!= len(t): return False count_s, count_t = {}, {} for i in range(len(s)): count_s[s[i]] = 1 + count_s.get(s[i], 0) count_t[t[i]] = 1 + count_t.get(t[i], 0) for c in count_s: if count_s[c] !","title":"Valid Anagram"},{"content":"パターン1 7 → 49 → 97 → 130 → 10 → 1\nパターン2 2 → 4 → 16 → 37 → 30 → 9 → 81 → 65 → 61 → 37\nAlgorithm\n  number n の次の数が何かを調べる\n  cycle に入ったかを調べる。\n  の調べ方 19 → 1^2 + 9^2 = 82\n  変数 output に 0 を代入し、 while で n がある間\nn = 19 の場合、\n1の位を取得 19 % 10 = 9\n9 ** 2 = 81\noutput += 81\n10の位を取得 n = 19 // 10 = 1\nwhile で上記と同様の処理。 このループで n = 1 // 10 = 0\nとなり、ループを抜ける。\ncycle に入ったかの調べ方。 HashSet を使い、すでに訪れた数かを調べる。 すでに訪れた場合、 cycle に入ったことがわかるので、 その時点で False を返す。 もし訪れてなければ、HashSet に追加。 n == 1 となれば True を返す。  class Solution: def isHappy(self, n: int) -\u0026gt; bool: visit = set() while n not in visit: visit.add(n) n = self.sum_of_squares(n) if n == 1: return True return False def sum_of_squares(self, n: int) -\u0026gt; int: output = 0 while n: digit = n % 10 digit = digit ** 2 output += digit n = n // 10 return output ","permalink":"https://hirotoshimizu.github.io/posts/happy-number/","summary":"パターン1 7 → 49 → 97 → 130 → 10 → 1\nパターン2 2 → 4 → 16 → 37 → 30 → 9 → 81 → 65 → 61 → 37\nAlgorithm\n  number n の次の数が何かを調べる\n  cycle に入ったかを調べる。\n  の調べ方 19 → 1^2 + 9^2 = 82\n  変数 output に 0 を代入し、 while で n がある間\nn = 19 の場合、\n1の位を取得 19 % 10 = 9","title":"Happy Number"},{"content":"https://leetcode.com/problems/replace-elements-with-greatest-element-on-right-side/\n一番最後が -1 になるので、 変数 right_max に -1 を入れる。\n後ろからループしていき、 現在の値 と right_max の大きい値を new_max に入れる。 現在の値に right_max を代入し、 right_max の値に nex_max を代入しループを続ける。\n | 17 | 18 | 5 | 4 | 6 | 1 | -1 18 6 6 6 1 -1\nclass Solution: def replaceElements(self, arr: List[int]) -\u0026gt; List[int]: right_max = -1 for i in range(len(arr) -1, -1, -1): new_max = max(right_max, arr[i]) arr[i] = right_max right_max = new_max ","permalink":"https://hirotoshimizu.github.io/posts/replace-elements-with-greatest-element-on-right-side/","summary":"https://leetcode.com/problems/replace-elements-with-greatest-element-on-right-side/\n一番最後が -1 になるので、 変数 right_max に -1 を入れる。\n後ろからループしていき、 現在の値 と right_max の大きい値を new_max に入れる。 現在の値に right_max を代入し、 right_max の値に nex_max を代入しループを続ける。\n | 17 | 18 | 5 | 4 | 6 | 1 | -1 18 6 6 6 1 -1\nclass Solution: def replaceElements(self, arr: List[int]) -\u0026gt; List[int]: right_max = -1 for i in range(len(arr) -1, -1, -1): new_max = max(right_max, arr[i]) arr[i] = right_max right_max = new_max ","title":"Replace Elements With Greatest Element on Right Side"},{"content":"この問題の解き方は pointer を2つ使う。\n  真ん中を探す Pointer を2つ使い、fast pointer と fast.next が null になるまで Pinter を進める。 その際 slow pointer が真ん中に位置する。\n  後ろ半分を反転させる slow pointer が真ん中に位置しているので、 slow が null になるまでループさせる。\nstep.1 1 → 2 → 3 → null\nprev と curr を憶えておく必要がある。\nprev = null curr = 1\ncurr の next node を temp に入れておく。 temp = 2\nnull ← 1 2 → 3 → null\nstep.2 prev = 1 curr = 2 temp = 3\nnull ← 1 ← 2 3 → null\nstep.3 prev = 2 curr = 3 temp = null\nnull ← 1 ← 2 ← 3 null\nstep.4 prev = 3 curr = null temp = null\n  左半分と右半分を比べる。 違う場合は、その時点で false を返す。 同じ場合は、left と right を next に移動させて比較していく。\n  # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def isPalindrome(self, head: Optional[ListNode]) -\u0026gt; bool: fast = head slow = head # find middle(slow) while fast and fast.next: fast = fast.next.next slow = slow.next # reverser second half prev = None while slow: temp = slow.next slow.next = prev prev = slow slow = temp # check palindrome left, right = head, prev while right: if left.val != right.val: return False left = left.next right = right.next return True ","permalink":"https://hirotoshimizu.github.io/posts/palindrome-linked-list/","summary":"この問題の解き方は pointer を2つ使う。\n  真ん中を探す Pointer を2つ使い、fast pointer と fast.next が null になるまで Pinter を進める。 その際 slow pointer が真ん中に位置する。\n  後ろ半分を反転させる slow pointer が真ん中に位置しているので、 slow が null になるまでループさせる。\nstep.1 1 → 2 → 3 → null\nprev と curr を憶えておく必要がある。\nprev = null curr = 1\ncurr の next node を temp に入れておく。 temp = 2\nnull ← 1 2 → 3 → null\nstep.2 prev = 1 curr = 2 temp = 3","title":"Palindrome Linked List"},{"content":"https://leetcode.com/problems/merge-sorted-array/\nこの問題は pointer を 3つ使う。 1つ目は、nums1 の最後に pointer を設定。 2つ目は、nums1 の m に pointer を設定。 3つ目は、nums2 の 最後に pointer を設定。\n | 1 | 2 | 3 | 0 | 0 | 0 |  ↑ ↑   | 2 | 5 | 6 |  ↑  nums1[m - 1] と nums2[n - 1] の値を比べて、 nums2[n - 1] の値が大きいので、 nums1[last] = nums2[n - 1] を設定する。 そして nums2 の n の pointer を -1 してずらす。 また nums1 の last の pointer も -1 する。\n | 1 | 2 | 3 | 0 | 0 | 6 |  ↑ ↑   | 2 | 5 | 6 |  ↑   | 1 | 2 | 3 | 0 | 5 | 6 |  ↑ ↑   | 2 | 5 | 6 | ↑\n | 1 | 2 | 3 | 3 | 5 | 6 |  ↑ ↑   | 2 | 5 | 6 | ↑\n | 1 | 2 | 2 | 3 | 5 | 6 |  ↑ ↑   | 2 | 5 | 6 | ↑\nwhile を抜ける。\nもし nums1 の最初の数（一番小さい数）が nums2 の最初の数より大きい場合、 上記の while 文だと merge されないので、 while n \u0026gt; 0: で nums2 の残りを nums1 に入れる。\nclass Solution: def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -\u0026gt; None: \u0026#34;\u0026#34;\u0026#34; Do not return anything, modify nums1 in-place instead. \u0026#34;\u0026#34;\u0026#34; # last index nums1 last = m + n -1 # merget in reverse order while m \u0026gt; 0 and n \u0026gt; 0: if nums1[m - 1] \u0026gt; nums2[n - 1]: nums1[last] = nums1[m - 1] m -= 1 else: nums1[last] = nums2[n - 1] n -= 1 last -= 1 # fill nums1 with leftover nums2 elements while n \u0026gt; 0: nums1[last] = nums2[n - 1] n, last = n -1, last - 1 ","permalink":"https://hirotoshimizu.github.io/posts/merge-sorted-array/","summary":"https://leetcode.com/problems/merge-sorted-array/\nこの問題は pointer を 3つ使う。 1つ目は、nums1 の最後に pointer を設定。 2つ目は、nums1 の m に pointer を設定。 3つ目は、nums2 の 最後に pointer を設定。\n | 1 | 2 | 3 | 0 | 0 | 0 |  ↑ ↑   | 2 | 5 | 6 |  ↑  nums1[m - 1] と nums2[n - 1] の値を比べて、 nums2[n - 1] の値が大きいので、 nums1[last] = nums2[n - 1] を設定する。 そして nums2 の n の pointer を -1 してずらす。 また nums1 の last の pointer も -1 する。","title":"Merge Sorted Array"},{"content":"https://leetcode.com/problems/house-robber/\n隣り合った家は訪れることが出来ないので、 変数 rob1 と rob2 を用意する。\nfor で全ての家を訪れ、 pointer のある位置＋rob1 と rob2 の大きい値を temp に入れる。\nrob1 pointerのある位置の前の前の家 rob2 pointerのある位置のは前の家\nrob2 が nums の最後の位置まで行くとループが終わるので return で rob2 を返す。\nclass Solution: def rob(self, num: List[int])-\u0026gt; int: rob1, rob2 = 0, 0 for n in num: temp = max(rob1 + n, rob2) rob1 = rob2 rob2 = temp return rob2 ","permalink":"https://hirotoshimizu.github.io/posts/house-robber/","summary":"https://leetcode.com/problems/house-robber/\n隣り合った家は訪れることが出来ないので、 変数 rob1 と rob2 を用意する。\nfor で全ての家を訪れ、 pointer のある位置＋rob1 と rob2 の大きい値を temp に入れる。\nrob1 pointerのある位置の前の前の家 rob2 pointerのある位置のは前の家\nrob2 が nums の最後の位置まで行くとループが終わるので return で rob2 を返す。\nclass Solution: def rob(self, num: List[int])-\u0026gt; int: rob1, rob2 = 0, 0 for n in num: temp = max(rob1 + n, rob2) rob1 = rob2 rob2 = temp return rob2 ","title":"House Robber"},{"content":"https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/\nこの問題は pointer を2つ使い target になる数を探していく。\npointer を left と right に置き、 left と right の合計が target の値と同じかを計算する。\n合計が大きい場合は right の pointer を左にずらし、 合計が小さい場合は left の pointer を右にずらしていく。\n合計がtarget の値になるまでループして index の位置を返す。\ntarget = 9\n | 1 | 3 | 4 | 5 | 7 | 11 | 　↑　↑\n1 + 11 = 12 \u0026gt; 9\n | 1 | 3 | 4 | 5 | 7 | 11 | 　↑　↑\n1 + 7 = 8 \u0026lt; 9\n | 1 | 3 | 4 | 5 | 7 | 11 | 　↑　↑\n3 + 7 = 10 \u0026gt; 9\n | 1 | 3 | 4 | 5 | 7 | 11 | 　↑　↑\n3 + 5 = 8 \u0026lt; 9\n | 1 | 3 | 4 | 5 | 7 | 11 | 　↑　↑\n4 + 5 = 9\n[3,4]\nclass Solution: def twoSum(self, numbers: List[int], target: int) -\u0026gt; List[int]: left = 0 right = len(numbers) - 1 while left \u0026lt; right: total = numbers[left] + numbers[right] if total \u0026gt; target: right -= 1 elif total \u0026lt; target: left += 1 else: return [left +1, right + 1] return [] ","permalink":"https://hirotoshimizu.github.io/posts/two-sum-ii-input-array-is-sorted/","summary":"https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/\nこの問題は pointer を2つ使い target になる数を探していく。\npointer を left と right に置き、 left と right の合計が target の値と同じかを計算する。\n合計が大きい場合は right の pointer を左にずらし、 合計が小さい場合は left の pointer を右にずらしていく。\n合計がtarget の値になるまでループして index の位置を返す。\ntarget = 9\n | 1 | 3 | 4 | 5 | 7 | 11 | 　↑　↑\n1 + 11 = 12 \u0026gt; 9\n | 1 | 3 | 4 | 5 | 7 | 11 | 　↑　↑","title":"Two Sum Ii Input Array Is Sorted"},{"content":"https://leetcode.com/problems/find-the-town-judge/\ngraphの問題で、trust のペア, [a, b] は a から b に向かう directed edge である。\n例えば、 N = 5 で trust trust = [[1,3],[2,3],[4,3],[4,1],[5,3],[5,1],[5,4]] の場合下記のような graph になる。\n3 は 1,2,4,5 から信頼されていて、 誰も信頼していない。 そのため、judge は 3 になる。\nこの graph theory の、 outdegree の辺は、 その人が他の人を信頼している数になる。\nindegree の辺は他の人から信頼されている数になる。\nそのため indegree と outdegree によって誰が judge か判断できる。\njudge は outdegree が 0 で indegree が N - 1 となる。\ntrust をループして全員の indegree, outdegree の数を調査できる。\nindegree = [0] * (N + 1) outdegree = [0] * (N + 1) for a, b in trust: outdegree[a] += 1 indegree[b] += 1 そして、1 ～ N 人全員をループして、チェックすれば、 judge がわかる。\nfor i in range(1, N + 1): if indegree[i] == N - 1 and outdegree[i] == 0: return i return -1 Time complexity: O(E)\nMem complexity: O(n)\ndef findJudge(self, N: int, trust: List[List[int]]) -\u0026gt; int: if len(trust) \u0026lt; N - 1: return -1 indegree = [0] * (N + 1) outdegree = [0] * (N + 1) for a, b in trust: outdegree[a] += 1 indegree[b] += 1 for i in range(1, N + 1): if indegree[i] == N - 1 and outdegree[i] == 0: return i return -1 ","permalink":"https://hirotoshimizu.github.io/posts/find-the-town-judge/","summary":"https://leetcode.com/problems/find-the-town-judge/\ngraphの問題で、trust のペア, [a, b] は a から b に向かう directed edge である。\n例えば、 N = 5 で trust trust = [[1,3],[2,3],[4,3],[4,1],[5,3],[5,1],[5,4]] の場合下記のような graph になる。\n3 は 1,2,4,5 から信頼されていて、 誰も信頼していない。 そのため、judge は 3 になる。\nこの graph theory の、 outdegree の辺は、 その人が他の人を信頼している数になる。\nindegree の辺は他の人から信頼されている数になる。\nそのため indegree と outdegree によって誰が judge か判断できる。\njudge は outdegree が 0 で indegree が N - 1 となる。\ntrust をループして全員の indegree, outdegree の数を調査できる。\nindegree = [0] * (N + 1) outdegree = [0] * (N + 1) for a, b in trust: outdegree[a] += 1 indegree[b] += 1 そして、1 ～ N 人全員をループして、チェックすれば、 judge がわかる。","title":"Find the Town Judge"},{"content":"DFS\nBase Case root が Null は None を返す。\nTree を反転して値が同じなら True を返すので、\nchildren node の値を swap して同じか確かめる。\nTime complexity: O(n)\nMem complexity: O(n)\n# Definition for a binary tree node. # class TreeNode(object): # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution(object): def invertTree(self, root): \u0026#34;\u0026#34;\u0026#34; :type root: TreeNode :rtype: TreeNode \u0026#34;\u0026#34;\u0026#34; if not root: return None tmp = root.left root.left = root.right root.right = tmp self.invertTree(root.left) self.invertTree(root.right) return root ","permalink":"https://hirotoshimizu.github.io/posts/invert-binary-tree/","summary":"DFS\nBase Case root が Null は None を返す。\nTree を反転して値が同じなら True を返すので、\nchildren node の値を swap して同じか確かめる。\nTime complexity: O(n)\nMem complexity: O(n)\n# Definition for a binary tree node. # class TreeNode(object): # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution(object): def invertTree(self, root): \u0026#34;\u0026#34;\u0026#34; :type root: TreeNode :rtype: TreeNode \u0026#34;\u0026#34;\u0026#34; if not root: return None tmp = root.","title":"Invert Binary Tree"},{"content":"DFS recursive\nBase Case は p,q が Null の場合同じ Tree なので return する。\nもし p,q のどちらかの値が違う場合、その Tree は同じではないので、 False を return する。 また、どちらかの値が Null の場合同じ Tree ではないので、この場合も False を　return する。\nTime complexity: O(n) Mem complexity: O(n)\n# Definition for a binary tree node. # class TreeNode(object): # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution(object): def isSameTree(self, p, q): \u0026#34;\u0026#34;\u0026#34; :type p: TreeNode :type q: TreeNode :rtype: bool \u0026#34;\u0026#34;\u0026#34; if not p and not q: return True if not p or not q or p.val != q.val: return False return(self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)) ","permalink":"https://hirotoshimizu.github.io/posts/same-tree/","summary":"DFS recursive\nBase Case は p,q が Null の場合同じ Tree なので return する。\nもし p,q のどちらかの値が違う場合、その Tree は同じではないので、 False を return する。 また、どちらかの値が Null の場合同じ Tree ではないので、この場合も False を　return する。\nTime complexity: O(n) Mem complexity: O(n)\n# Definition for a binary tree node. # class TreeNode(object): # def __init__(self, val=0, left=None, right=None): # self.val = val # self.left = left # self.right = right class Solution(object): def isSameTree(self, p, q): \u0026#34;\u0026#34;\u0026#34; :type p: TreeNode :type q: TreeNode :rtype: bool \u0026#34;\u0026#34;\u0026#34; if not p and not q: return True if not p or not q or p.","title":"Same Tree"},{"content":"回答のアプローチは Recursive DFS BFS Iterative DFS\nBase case root が empty children が Null\nRecursive DFS\nTime complexity: O(n) Mem complexity: O(n)\nclass Solution(object): def maxDepth(self, root): \u0026#34;\u0026#34;\u0026#34; :type root: TreeNode :rtype: int \u0026#34;\u0026#34;\u0026#34; if not root: return 0 return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right)) BFS\nBFS を使う場合は Queue を使う。\n 3  ／　＼ 9 20 ／＼ 15 7\n | 3 | 9 | 20 | 15 | 7 | 1 2 2 3 3 ← Level\n | 3 | 1\nQueue を deque していくと 最終的に Queue の値がなくなるので、 その時に level を返す。\nif not root: retunr 0 level = 0 q = deque([root]) while q: for i in range(len(q)): node = q.popleft() if node.left: q.append(node.left) if node.right: q.append(node.right) level += 1 return level Iterative DFS\nPre-order DFS\nstack\n | node depth | | 3 1 | pop して\n | node depth | | 20 2 | | 9 2 | pop して\n | node depth | | 20 2 | 20 には子がいるので、stack に追加\n | node depth | | 7 3 | | 15 3 | stack = [[root, 1]] res = 0 while stack: node, depth = stack.pop() if node: res = max(res, depth) stack.append([node.left, depth + 1]) stack.append([node.right, depth + 1]) return res ","permalink":"https://hirotoshimizu.github.io/posts/maximum-depth-of-binary-tree/","summary":"回答のアプローチは Recursive DFS BFS Iterative DFS\nBase case root が empty children が Null\nRecursive DFS\nTime complexity: O(n) Mem complexity: O(n)\nclass Solution(object): def maxDepth(self, root): \u0026#34;\u0026#34;\u0026#34; :type root: TreeNode :rtype: int \u0026#34;\u0026#34;\u0026#34; if not root: return 0 return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right)) BFS\nBFS を使う場合は Queue を使う。\n 3  ／　＼ 9 20 ／＼ 15 7\n | 3 | 9 | 20 | 15 | 7 | 1 2 2 3 3 ← Level","title":"Maximum Depth of Binary Tree"},{"content":"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/\nこの問題の回答方法としては Recursive と Iterative なアプローチがある。\nRecursive Approach\nアルゴリズム\n ルートの Node から始める。 p と q が右の subtree にある場合、1から右のsubtreeを探すようにする。 p と q が左の subtree にある場合、1から左のsubtreeを探すようにする。 もし 2 と 3 のステップが not true の場合、p と q の共通の Node を見つけたこととなる。  Time complexity: O(n)\nMem complexity: O(n)\n# Definition for a binary tree node. # class TreeNode(object): # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution(object): def lowestCommonAncestor(self, root, p, q): \u0026#34;\u0026#34;\u0026#34; :type root: TreeNode :type p: TreeNode :type q: TreeNode :rtype: TreeNode \u0026#34;\u0026#34;\u0026#34; parent_val = root.val p_val = p.val q_val = q.val if p_val \u0026gt; parent_val and q_val \u0026gt; parent_val: return self.lowestCommonAncestor(root.right, p, q) elif p_val \u0026lt; parent_val and q_val \u0026lt; parent_val: return self.lowestCommonAncestor(root.left, p, q) else: return root Iterative Approach\nアルゴリズム\nやり方としては Recursive なアプローチと似ている。 違いとしては、recursive な function を呼ぶ代わりに、tree を 横断する。\nそのため、backtrace して、LCA node を探す必要がないため stack,recursion を使わない。 Iterative なやり方としては、分かれるポイントを探すこと。\nTime complexity: O(n)\nMem complexity: O(1)\n# Definition for a binary tree node. # class TreeNode(object): # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution(object): def lowestCommonAncestor(self, root, p, q): \u0026#34;\u0026#34;\u0026#34; :type root: TreeNode :type p: TreeNode :type q: TreeNode :rtype: TreeNode \u0026#34;\u0026#34;\u0026#34; cur = root while cur: if p.val \u0026gt; cur.val and q.val \u0026gt; cur.val: cur = cur.right elif p.val \u0026lt; cur.val and q.val \u0026lt; cur.val: cur = cur.left else: return cur ","permalink":"https://hirotoshimizu.github.io/posts/lowest-common-ancestor-of-a-binary-search-tree/","summary":"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/\nこの問題の回答方法としては Recursive と Iterative なアプローチがある。\nRecursive Approach\nアルゴリズム\n ルートの Node から始める。 p と q が右の subtree にある場合、1から右のsubtreeを探すようにする。 p と q が左の subtree にある場合、1から左のsubtreeを探すようにする。 もし 2 と 3 のステップが not true の場合、p と q の共通の Node を見つけたこととなる。  Time complexity: O(n)\nMem complexity: O(n)\n# Definition for a binary tree node. # class TreeNode(object): # def __init__(self, x): # self.val = x # self.left = None # self.right = None class Solution(object): def lowestCommonAncestor(self, root, p, q): \u0026#34;\u0026#34;\u0026#34; :type root: TreeNode :type p: TreeNode :type q: TreeNode :rtype: TreeNode \u0026#34;\u0026#34;\u0026#34; parent_val = root.","title":"Lowest Common Ancestor of a Binary Search Tree"},{"content":"https://leetcode.com/problems/climbing-stairs/\nn = 5\n 0 ／　＼ 1 2 ／＼ ／＼ 2 3 3 4 ／＼ ／＼ ／＼ ／＼ 3 4 4 5 4 5 5 6  ／＼ ／＼ ／＼　／＼ 4 5 5 6 5 6　5 6 ／＼ 5 6\nn が 5 steps の場合、 8通りの選択が出来る。\nDFS でも出来るかが 2^n となる。\nそのため Dynamic Programming を使う。\n同じ計算をする値は memoize する\n | 8 | 5 | 3 | 2 | 1 | 1 | n に辿り着くまでの数 0 1 2 3 4 5(step) one two\nn に辿り着くまでの数はBase Number を基に計算できる。\nTime complexity: O(n) Mem complexity: O(n)\nclass Solution(object): def climbStairs(self, n): \u0026#34;\u0026#34;\u0026#34; :type n: int :rtype: int \u0026#34;\u0026#34;\u0026#34; one, two = 1, 1 for i in n: temp = one one = one + two two = temp return one ","permalink":"https://hirotoshimizu.github.io/posts/climbing-stairs/","summary":"https://leetcode.com/problems/climbing-stairs/\nn = 5\n 0 ／　＼ 1 2 ／＼ ／＼ 2 3 3 4 ／＼ ／＼ ／＼ ／＼ 3 4 4 5 4 5 5 6  ／＼ ／＼ ／＼　／＼ 4 5 5 6 5 6　5 6 ／＼ 5 6\nn が 5 steps の場合、 8通りの選択が出来る。\nDFS でも出来るかが 2^n となる。\nそのため Dynamic Programming を使う。\n同じ計算をする値は memoize する\n | 8 | 5 | 3 | 2 | 1 | 1 | n に辿り着くまでの数 0 1 2 3 4 5(step) one two","title":"Climbing Stairs"},{"content":"https://leetcode.com/problems/meeting-rooms/\n先ず始めに intervals のスタート時間でソートする。\nintervals の時間がソートされたため、 ループで最初の会議の終わりの時間と次の会議の始まりの時間を比較し、 最初の会議の終わりの時間 が 次の会議の始まりの時間より大きい場合、 会議の時間が重なっているので、False を返す。\n次の会議の開始時間 が 前の会議の終わり時間より小さい場合ループを続ける。\nループする際、次のリストと比較するため for の range で -1 をする。\nソートをするので Time complexity は O(n log n) となる。\nTime complexity: O(n log n) Mem complexity: O(1)\nclass Solution(object): def canAttendMeetings(self, intervals): \u0026#34;\u0026#34;\u0026#34; :type intervals: List[List[int]] :rtype: bool \u0026#34;\u0026#34;\u0026#34; intervals.sort() for i in range(len(intervals) -1): if intervals[i][1] \u0026gt; intervals[i + 1][0]: return False return True ","permalink":"https://hirotoshimizu.github.io/posts/meeting-rooms/","summary":"https://leetcode.com/problems/meeting-rooms/\n先ず始めに intervals のスタート時間でソートする。\nintervals の時間がソートされたため、 ループで最初の会議の終わりの時間と次の会議の始まりの時間を比較し、 最初の会議の終わりの時間 が 次の会議の始まりの時間より大きい場合、 会議の時間が重なっているので、False を返す。\n次の会議の開始時間 が 前の会議の終わり時間より小さい場合ループを続ける。\nループする際、次のリストと比較するため for の range で -1 をする。\nソートをするので Time complexity は O(n log n) となる。\nTime complexity: O(n log n) Mem complexity: O(1)\nclass Solution(object): def canAttendMeetings(self, intervals): \u0026#34;\u0026#34;\u0026#34; :type intervals: List[List[int]] :rtype: bool \u0026#34;\u0026#34;\u0026#34; intervals.sort() for i in range(len(intervals) -1): if intervals[i][1] \u0026gt; intervals[i + 1][0]: return False return True ","title":"Meeting Rooms"},{"content":"https://leetcode.com/problems/merge-two-sorted-lists/\nダミー Node を作って edge case の 空の Linked List が挿入されても大丈夫なようにする。\nその後はループで l1 と l2 の val を比べ、 小さい値を tail.next に入れる。 その後、 next をずらす。\nループ後 l1, l2 のどちらかのリストが empty の場合、 Linked List に追加する必要があるので、 リストが empty か確認し、値があれば Linked List に追加する。\n# Definition for singly-linked list. # class ListNode(object): # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution(object): def mergeTwoLists(self, l1, l2): \u0026#34;\u0026#34;\u0026#34; :type l1: ListNode :type l2: ListNode :rtype: ListNode \u0026#34;\u0026#34;\u0026#34; dummy = ListNode() tail = dummy while l1 and l2: if l1.val \u0026lt; l2.val: tail.next = l1 l1 = l1.next else: tail.next = l2 l2 = l2.next tail = tail.next if l1: tail.next = l1 elif l2: tail.next = 12 return dummy.next ","permalink":"https://hirotoshimizu.github.io/posts/merge-two-sorted-lists/","summary":"https://leetcode.com/problems/merge-two-sorted-lists/\nダミー Node を作って edge case の 空の Linked List が挿入されても大丈夫なようにする。\nその後はループで l1 と l2 の val を比べ、 小さい値を tail.next に入れる。 その後、 next をずらす。\nループ後 l1, l2 のどちらかのリストが empty の場合、 Linked List に追加する必要があるので、 リストが empty か確認し、値があれば Linked List に追加する。\n# Definition for singly-linked list. # class ListNode(object): # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution(object): def mergeTwoLists(self, l1, l2): \u0026#34;\u0026#34;\u0026#34; :type l1: ListNode :type l2: ListNode :rtype: ListNode \u0026#34;\u0026#34;\u0026#34; dummy = ListNode() tail = dummy while l1 and l2: if l1.","title":"Merge Two Sorted Lists"},{"content":"https://leetcode.com/problems/linked-list-cycle/\nLinked List が Cycle なのかを確認する。\nLinked List が Cycle な場合、 2つのポインターを使う。 (1つめのポインターは 1つずつ進み、 2つめのポインターは 2つずつ進む。) Cycle な場合どこかの時点で2つ進むポインター が1つしか進まないポインターに追いつくので Cycle だとわかる。\nCycle ではない場合 いずれかの時点で ポインターが Null になる。\nTime complexity: O(n) Mem complexity: O(1)\n# Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution(object): def hasCycle(self, head): \u0026#34;\u0026#34;\u0026#34; :type head: ListNode :rtype: bool \u0026#34;\u0026#34;\u0026#34; slow, fast = head, head while fast and fast.next: slow = slow.next fast = fast.next.next if fast == slow: return True return False ","permalink":"https://hirotoshimizu.github.io/posts/linked-list-cycle/","summary":"https://leetcode.com/problems/linked-list-cycle/\nLinked List が Cycle なのかを確認する。\nLinked List が Cycle な場合、 2つのポインターを使う。 (1つめのポインターは 1つずつ進み、 2つめのポインターは 2つずつ進む。) Cycle な場合どこかの時点で2つ進むポインター が1つしか進まないポインターに追いつくので Cycle だとわかる。\nCycle ではない場合 いずれかの時点で ポインターが Null になる。\nTime complexity: O(n) Mem complexity: O(1)\n# Definition for singly-linked list. # class ListNode(object): # def __init__(self, x): # self.val = x # self.next = None class Solution(object): def hasCycle(self, head): \u0026#34;\u0026#34;\u0026#34; :type head: ListNode :rtype: bool \u0026#34;\u0026#34;\u0026#34; slow, fast = head, head while fast and fast.","title":"Linked List Cycle"},{"content":"https://leetcode.com/problems/reverse-linked-list/\n考え方としては、\n1 → 2 → 3 → 4 → 5\n1 ← 2 ← 3 ← 4 ← 5\nとするように考える。\n回答方法は iterative なやり方と recursive なやり方がある。 iterative なやり方は 2つの pointer を使う。\nprev と curr\nまず prev に　None を設定する。 curr は head にする\nNull → 1 → 2 → 3 → 4 → 5 ↑ ↑ prev curr\nループしている間 Linked List の 矢印の向き (curr.next) をずらしつつ、prev と next の pointer もずらしていく。\nNull ← 1 → 2 → 3 → 4 → 5 → Null ↑ ↑ prev curr\nNull ← 1 ← 2 → 3 → 4 → 5 → Null ↑ ↑ prev curr\nNull ← 1 ← 2 ← 3 → 4 → 5 → Null ↑ ↑ prev curr\nNull ← 1 ← 2 ← 3 ← 4 → 5 → Null ↑ ↑ prev curr\nNull ← 1 ← 2 ← 3 ← 4 ← 5 → Null ↑ ↑ prev curr\ncurr が Null になりループを抜けるので、 最後に head を prev に設定する。\nTime complexity: O(n) Mem complexity: O(1)\n# Definition for singly-linked list. class ListNode(object): def __init__(self, val=0, next=None): self.val = val self.next = next class Solution(object): def reverseList(self, head): \u0026#34;\u0026#34;\u0026#34; :type head: ListNode :rtype: ListNode \u0026#34;\u0026#34;\u0026#34; prev = None curr = head while curr: nxt = curr.next curr.next = prev prev = curr curr = nxt return prev recursive\nhead: ListNode{val: 1, next: ListNode{val: 2, next: ListNode{val: 3, next: ListNode{val: 4, next: ListNode{val: 5, next: None}}}}} head: ListNode{val: 2, next: ListNode{val: 3, next: ListNode{val: 4, next: ListNode{val: 5, next: None}}}} head: ListNode{val: 3, next: ListNode{val: 4, next: ListNode{val: 5, next: None}}} head: ListNode{val: 4, next: ListNode{val: 5, next: None}} head: ListNode{val: 5, next: None}\nhead: ListNode{val: 4, next: ListNode{val: 5, next: None}} reversedListHead: ListNode{val: 5, next: None}\nhead: ListNode{val: 4, next: None} reversedListHead: ListNode{val: 5, next: ListNode{val: 4, next: None}}\nhead: ListNode{val: 3, next: ListNode{val: 4, next: None}} reversedListHead: ListNode{val: 5, next: ListNode{val: 4, next: None}}\nhead: ListNode{val: 3, next: None} reversedListHead: ListNode{val: 5, next: ListNode{val: 4, next: ListNode{val: 3, next: None}}}\nhead: ListNode{val: 2, next: ListNode{val: 3, next: None}} reversedListHead: ListNode{val: 5, next: ListNode{val: 4, next: ListNode{val: 3, next: None}}}\nhead: ListNode{val: 2, next: None} reversedListHead: ListNode{val: 5, next: ListNode{val: 4, next: ListNode{val: 3, next: ListNode{val: 2, next: None}}}}\nhead: ListNode{val: 1, next: ListNode{val: 2, next: None}} reversedListHead: ListNode{val: 5, next: ListNode{val: 4, next: ListNode{val: 3, next: ListNode{val: 2, next: None}}}}\nhead: ListNode{val: 1, next: None} reversedListHead: ListNode{val: 5, next: ListNode{val: 4, next: ListNode{val: 3, next: ListNode{val: 2, next: ListNode{val: 1, next: None}}}}}\nTime complexity: O(n) Mem complexity: O(n)\n","permalink":"https://hirotoshimizu.github.io/posts/reverse-linked-list/","summary":"https://leetcode.com/problems/reverse-linked-list/\n考え方としては、\n1 → 2 → 3 → 4 → 5\n1 ← 2 ← 3 ← 4 ← 5\nとするように考える。\n回答方法は iterative なやり方と recursive なやり方がある。 iterative なやり方は 2つの pointer を使う。\nprev と curr\nまず prev に　None を設定する。 curr は head にする\nNull → 1 → 2 → 3 → 4 → 5 ↑ ↑ prev curr\nループしている間 Linked List の 矢印の向き (curr.next) をずらしつつ、prev と next の pointer もずらしていく。","title":"Reverse Linked List"},{"content":"https://leetcode.com/problems/valid-parentheses/\nPrerequisite Hash Map Stack\n最初にどのカッコがどの 括弧閉じ にマッチしているかわかるために HashMap を作る必要がある。 この際、括弧閉じ をキーにする。\nfor 文で list の中を確認し、 括弧開きは stack に入れる。\nstack は 最後に入れたものから出すので、 括弧開き と 括弧閉じ がマッチしていれば、 stack から pop できる。\n最後に stack に何も残らなければ、 全てがマッチして True を return する。\nTime complexity: O(n) Mem complexity: O(n)\nclass Solution(object): def isValid(self, s): \u0026#34;\u0026#34;\u0026#34; :type s: str :rtype: bool \u0026#34;\u0026#34;\u0026#34; stack = [] closeToOpen = { \u0026#39;)\u0026#39; : \u0026#39;(\u0026#39;, \u0026#39;]\u0026#39; : \u0026#39;[\u0026#39;, \u0026#39;}\u0026#39; : \u0026#39;{\u0026#39; } for c in s: if c in closeToOpen: if stack and stack[-1] == closeToOpen[c]: stack.pop() else: return False else: stack.append(c) return True if not stack else False ","permalink":"https://hirotoshimizu.github.io/posts/valid-parentheses/","summary":"https://leetcode.com/problems/valid-parentheses/\nPrerequisite Hash Map Stack\n最初にどのカッコがどの 括弧閉じ にマッチしているかわかるために HashMap を作る必要がある。 この際、括弧閉じ をキーにする。\nfor 文で list の中を確認し、 括弧開きは stack に入れる。\nstack は 最後に入れたものから出すので、 括弧開き と 括弧閉じ がマッチしていれば、 stack から pop できる。\n最後に stack に何も残らなければ、 全てがマッチして True を return する。\nTime complexity: O(n) Mem complexity: O(n)\nclass Solution(object): def isValid(self, s): \u0026#34;\u0026#34;\u0026#34; :type s: str :rtype: bool \u0026#34;\u0026#34;\u0026#34; stack = [] closeToOpen = { \u0026#39;)\u0026#39; : \u0026#39;(\u0026#39;, \u0026#39;]\u0026#39; : \u0026#39;[\u0026#39;, \u0026#39;}\u0026#39; : \u0026#39;{\u0026#39; } for c in s: if c in closeToOpen: if stack and stack[-1] == closeToOpen[c]: stack.","title":"Valid Parentheses"},{"content":"https://leetcode.com/problems/missing-number/\nsum([0,1,2,3]) - sum([3,0,1]) = 2 2がない数字なので、2が残る。\n最初に result に len(nums) を代入する。 nums が [3,0,1] の場合、 result に 3 が代入される。\nこれは for で回す時に range(len(nums)) だと 0, 1, 2 としかならないため。 result に len(nums) の代入が必要。\nresult += (i - nums[i]) をすることで、2 が return 出来る。\nTime complexity: O(n) Mem complexity: O(1)\nclass Solution(object): def missingNumber(self, nums): \u0026#34;\u0026#34;\u0026#34; :type nums: List[int] :rtype: int \u0026#34;\u0026#34;\u0026#34; result = len(nums) for i in range(len(nums)): result += (i - nums[i]) return result ","permalink":"https://hirotoshimizu.github.io/posts/missing-number/","summary":"https://leetcode.com/problems/missing-number/\nsum([0,1,2,3]) - sum([3,0,1]) = 2 2がない数字なので、2が残る。\n最初に result に len(nums) を代入する。 nums が [3,0,1] の場合、 result に 3 が代入される。\nこれは for で回す時に range(len(nums)) だと 0, 1, 2 としかならないため。 result に len(nums) の代入が必要。\nresult += (i - nums[i]) をすることで、2 が return 出来る。\nTime complexity: O(n) Mem complexity: O(1)\nclass Solution(object): def missingNumber(self, nums): \u0026#34;\u0026#34;\u0026#34; :type nums: List[int] :rtype: int \u0026#34;\u0026#34;\u0026#34; result = len(nums) for i in range(len(nums)): result += (i - nums[i]) return result ","title":"Missing Number"},{"content":"https://leetcode.com/problems/maximum-subarray/\n | -2 | 1 | -3 | 4 | -1 | 2 | 1 | -5 | 4 | 最初の3つの合計(-2 + 1 -3)はマイナスになるので、 そのため subarray のスタートは 4 もしくは 4以降の数字になる。\n合計が正の数になる場合は保持しておく。 変数に0 を代入して、 iterate しながら数字を追加していく。 合計がマイナスになる場合は保持する必要がないので、0 にする。\nTime complexity: O(n) Mem complexity: O(1)\nclass Solution(object): def maxSubArray(self, nums): \u0026#34;\u0026#34;\u0026#34; :type nums: List[int] :rtype: int \u0026#34;\u0026#34;\u0026#34; max_subarray = nums[0] current_subarray = 0 for n in nums: if current_subarray \u0026lt; 0: current_subarray = 0 current_subarray += n max_subarray = max(max_subarray, current_subarray) return max_subarray ","permalink":"https://hirotoshimizu.github.io/posts/maximum-subarray/","summary":"https://leetcode.com/problems/maximum-subarray/\n | -2 | 1 | -3 | 4 | -1 | 2 | 1 | -5 | 4 | 最初の3つの合計(-2 + 1 -3)はマイナスになるので、 そのため subarray のスタートは 4 もしくは 4以降の数字になる。\n合計が正の数になる場合は保持しておく。 変数に0 を代入して、 iterate しながら数字を追加していく。 合計がマイナスになる場合は保持する必要がないので、0 にする。\nTime complexity: O(n) Mem complexity: O(1)\nclass Solution(object): def maxSubArray(self, nums): \u0026#34;\u0026#34;\u0026#34; :type nums: List[int] :rtype: int \u0026#34;\u0026#34;\u0026#34; max_subarray = nums[0] current_subarray = 0 for n in nums: if current_subarray \u0026lt; 0: current_subarray = 0 current_subarray += n max_subarray = max(max_subarray, current_subarray) return max_subarray ","title":"Maximum Subarray"},{"content":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock/\npointer を2つ使う。 left が right より低い時点で売る可能性あり。 max_profit に最大の profit を格納。\nright の pointer は右に移動し続け\nleft の　pointer は prices[l] が prices[r] より大きい際に、 left の pointer を right の pointer の位置に移動する。\nTime complexity: O(n)\nMem complexity: O(1)\nclass Solution(object): def maxProfit(self, prices): \u0026#34;\u0026#34;\u0026#34; :type prices: List[int] :rtype: int \u0026#34;\u0026#34;\u0026#34; l, r = 0, 1 max_profit = 0 while r \u0026lt; len(prices): if prices[l] \u0026lt; prices[r]: profit = prices[r] - prices[l] max_profit = max(max_profit, profit) else: l = r r += 1 return max_profit ","permalink":"https://hirotoshimizu.github.io/posts/best-time-to-buy-and-sell-stock/","summary":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock/\npointer を2つ使う。 left が right より低い時点で売る可能性あり。 max_profit に最大の profit を格納。\nright の pointer は右に移動し続け\nleft の　pointer は prices[l] が prices[r] より大きい際に、 left の pointer を right の pointer の位置に移動する。\nTime complexity: O(n)\nMem complexity: O(1)\nclass Solution(object): def maxProfit(self, prices): \u0026#34;\u0026#34;\u0026#34; :type prices: List[int] :rtype: int \u0026#34;\u0026#34;\u0026#34; l, r = 0, 1 max_profit = 0 while r \u0026lt; len(prices): if prices[l] \u0026lt; prices[r]: profit = prices[r] - prices[l] max_profit = max(max_profit, profit) else: l = r r += 1 return max_profit ","title":"Best Time to Buy and Sell Stock"},{"content":"https://leetcode.com/problems/two-sum/\n | 2 | 7 | 11 | 15 | 　↑　↑ 全てのコンビネーションを確認しようと Brute Force で問題を解こうとすると ループの中でループをするのでo(n^2)となる。\n | 2 | 7 | 11 | 15 | そのため HashMapを使う必要がある。 ループして array の中を確認する際に、 HashMap に val と key を持たせる。 ループ時に target - val の値が HashMap にあれば、 合計の値を持つ index が return できる。\n | 2 | 7 | 11 | 15 |  ↑   | HashMap | | val : index | | 2 : 1 |  | HashMap | | val : index | | 2 : 1 | | 7 : 2 |← | 11 : 3 | | 15 : 4 | target は 9 なので val 7 を確認時に HashMap にすでに 2 が入っているので この時点で return できる。\n一度だけのループなので、 Time complexity: O(n) Mem complexity: O(n) となる。\nclass Solution(object): def twoSum(self, nums, target): \u0026#34;\u0026#34;\u0026#34; :type nums: List[int] :type target: int :rtype: List[int] \u0026#34;\u0026#34;\u0026#34; map = {} for i, n in enumerate(nums): diff = target - n if diff in map: return [map[diff], i] map[n] = i ","permalink":"https://hirotoshimizu.github.io/posts/two-sum/","summary":"https://leetcode.com/problems/two-sum/\n | 2 | 7 | 11 | 15 | 　↑　↑ 全てのコンビネーションを確認しようと Brute Force で問題を解こうとすると ループの中でループをするのでo(n^2)となる。\n | 2 | 7 | 11 | 15 | そのため HashMapを使う必要がある。 ループして array の中を確認する際に、 HashMap に val と key を持たせる。 ループ時に target - val の値が HashMap にあれば、 合計の値を持つ index が return できる。\n | 2 | 7 | 11 | 15 |  ↑   | HashMap | | val : index | | 2 : 1 |  | HashMap | | val : index | | 2 : 1 | | 7 : 2 |← | 11 : 3 | | 15 : 4 | target は 9 なので val 7 を確認時に HashMap にすでに 2 が入っているので この時点で return できる。","title":"Two Sum"},{"content":"Responses HttpResponse オブジェクトと違い、レンダリングされたコンテンツでResponseオブジェクトをインスタンス化する必要がない。 その代わりにレンダリングされていないデータをパスする必要がある。\nResponseクラスで使用されるレンダラーは、Djangoモデルインスタンスなどの複雑なデータ型をネイティブに処理できないため、Responseオブジェクトを作成する前に、データをプリミティブデータ型にシリアル化する必要があります。\nREST frameworkのSerializerクラスを使ってこのデータをシリアライズするか、カスタムシリアライザーを使用する。\n引数\n data : レスポンス用のシリアライズされたデータ status : レスポンス用のステータスコード　デフォルトでは 200 template_name : HTMLRenderer が選択されているならテンプレート名 header : レスポンス用の辞書型 HTTP ヘッダー content_type : レスポンス用のコンテンツタイプ。一般的にコンテンツネゴシエーションのrenderer によって自動的に設定される。しかし、場合によっては明示的にコンテンツタイプを特定する必要もある。  プロジェクトが既にある場合 ユーザーモデルは拡張する。\n最初から作成する場合は モデルをオーバーライドして独自のカスタムモデルを作成\nカスタムユーザーモデルは\n","permalink":"https://hirotoshimizu.github.io/posts/2021-07-29/","summary":"Responses HttpResponse オブジェクトと違い、レンダリングされたコンテンツでResponseオブジェクトをインスタンス化する必要がない。 その代わりにレンダリングされていないデータをパスする必要がある。\nResponseクラスで使用されるレンダラーは、Djangoモデルインスタンスなどの複雑なデータ型をネイティブに処理できないため、Responseオブジェクトを作成する前に、データをプリミティブデータ型にシリアル化する必要があります。\nREST frameworkのSerializerクラスを使ってこのデータをシリアライズするか、カスタムシリアライザーを使用する。\n引数\n data : レスポンス用のシリアライズされたデータ status : レスポンス用のステータスコード　デフォルトでは 200 template_name : HTMLRenderer が選択されているならテンプレート名 header : レスポンス用の辞書型 HTTP ヘッダー content_type : レスポンス用のコンテンツタイプ。一般的にコンテンツネゴシエーションのrenderer によって自動的に設定される。しかし、場合によっては明示的にコンテンツタイプを特定する必要もある。  プロジェクトが既にある場合 ユーザーモデルは拡張する。\n最初から作成する場合は モデルをオーバーライドして独自のカスタムモデルを作成\nカスタムユーザーモデルは","title":"2021 07 29"},{"content":"APIView REST frameworkは Djangoの View class のサブクラスである、 APIViewclassを提供する。\nAPIViewclass は下記のようにView classとは異なる。\n  handler methods を通ったRequests は REST frameworkの Request インスタンスになり。 Django の HttpRequestインスタンスではない。\n  handler methods の return は REST frameworkの Responseとなり、 その view は content negotiation と response に一致した renderer を返す。\n  どの APIException のエクセプションは正しいレスポンスに仲介される。\n  来るリクエストは認証され、handler methodsに送る前に、 適切な権限やスロットルチェックが行われる。\n  DRF ドキュメント\nViewSet viewSet classは APIViewを継承している。 viewsetで API policy をコントロールするにあたり、 スタンダードの属性であるpermission_classes,authentication_classesが使える。\nviewSet classはどのアクションも含んでいないので、 クラスをオーバーライドして明示的に定義する必要がある。\nDRF ドキュメント\nGenericViewSet GenericViewSetclass は GenericAPIViewを継承して、 デフォルトセットの get_object、get_querysetメソッドと その他の generic view base behaviorを提供する。 しかしデフォルトではどんなアクションも含まれない。\nGenericViewSetを使うにあたり、クラスのオーバーライドと 要求される mixn クラス もしくは、アクションを明示的に定義する必要がある。\nDRF ドキュメント\nModelViewSet ModelViewSet class は GenericAPIView を継承し、さまざまなミックスインクラスの動作を混合することにより、さまざまなアクションの実装を含みます。\nModelViewSet classによって提供されるアクションクラスは .list(),.retrieve(),.create(),.update(),.partial_update(),destroy()\nModelViewSet は GenericAPIViewを拡張しているので、 最低でも queryset と serializer_class属性だけで良い。\n例\nclass AccountViewSet(viewsets.ModelViewSet): \u0026#34;\u0026#34;\u0026#34; A simple ViewSet for viewing and editing accounts. \u0026#34;\u0026#34;\u0026#34; queryset = Account.objects.all() serializer_class = AccountSerializer permission_classes = [IsAccountAdminOrReadOnly] DRF ドキュメント\nMixins mixin クラスは basic view behaviorで使われるアクションを提供する。 mixin　クラスは .get(), .post()などのhabndler method を直接定義するのではなく、アクションメソッドを提供する。これにより柔軟に構成できる。\nmixin クラスは rest_framework.mixinsより import できる。\n","permalink":"https://hirotoshimizu.github.io/posts/2021-07-28/","summary":"APIView REST frameworkは Djangoの View class のサブクラスである、 APIViewclassを提供する。\nAPIViewclass は下記のようにView classとは異なる。\n  handler methods を通ったRequests は REST frameworkの Request インスタンスになり。 Django の HttpRequestインスタンスではない。\n  handler methods の return は REST frameworkの Responseとなり、 その view は content negotiation と response に一致した renderer を返す。\n  どの APIException のエクセプションは正しいレスポンスに仲介される。\n  来るリクエストは認証され、handler methodsに送る前に、 適切な権限やスロットルチェックが行われる。\n  DRF ドキュメント\nViewSet viewSet classは APIViewを継承している。 viewsetで API policy をコントロールするにあたり、 スタンダードの属性であるpermission_classes,authentication_classesが使える。\nviewSet classはどのアクションも含んでいないので、 クラスをオーバーライドして明示的に定義する必要がある。","title":"2021 07 28"},{"content":"今回は restaurants というアプリを作成し進めていきます。\nCSVのファイルは管理画面のレストランの一覧画面 http://127.0.0.1:8000/admin/restaurants/restaurant/ からアップ。\nアプリの作成\npython manage.py startapp restaurants モデルは restaurant で作成。\nAdmin テンプレートの Override templatesフォルダは manage.py と同じ階層に作成。\ntemplates/admin/restaurants/restaurant/change_list.html を作成\n{% extends \u0026#39;admin/change_list.html\u0026#39; %} {% load static %} {% block content %} \u0026lt;a href=\u0026#34;upload-csv/\u0026#34;\u0026gt;Upload a csv file\u0026lt;/a\u0026gt; {{ block.super }} {% endblock %} {{ block.super }} は親のテンプレートコンテンツ。\nDjango change_list.html\nCustom Admin Page の作成 上記で作成したリンク先の upload-csv/ の URL を設定\nrestaurants/admin.py の RestaurantAdmin で get_urls()を設定。\ndef get_urls(self): urls = super().get_urls() new_urls = [ path(\u0026#39;upload-csv/\u0026#39;, self.upload_csv), ] return new_urls + urls Django ドキュメント\ntemplates/admin/csv_upload.htmlを作成\n{% extends 'admin/base.html' %} {% block content %} \u0026lt;div\u0026gt; \u0026lt;form action=\u0026quot;.\u0026quot; method=\u0026quot;POST\u0026quot; enctype=\u0026quot;multipart/form-data\u0026quot;\u0026gt; {{ form.as_p }} {% csrf_token %} \u0026lt;button type=\u0026quot;submit\u0026quot;\u0026gt;Upload File\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/div\u0026gt; {% endblock %} csvファイルからのテーブル作成 RestaurantAdmin の get_urlsに記載した upload_csv の処理を追加。\ndef upload_csv(self, request): if request.method == \u0026#39;POST\u0026#39;: csv_file = request.FILES[\u0026#39;csv_upload\u0026#39;] file_data = csv_file.read().decode(\u0026#39;utf-8\u0026#39;) restaurants_data = file_data.split(\u0026#39;\\n\u0026#39;) for i in restaurants_data: fields = i.split(\u0026#34;,\u0026#34;) restaurant.objects.update_or_create( name=fields[0], address=fields[1], ) form = CsvImportForm() data = {\u0026#39;form\u0026#39;: form} return render(request, \u0026#39;admin/csv_upload.html\u0026#39;, data) update_or_create() を使用するので、 同じオブジェクトがあればアップデートされ、なければ作成される。\nフォームも必要なので、restaurants/admin.py　にフォームも用意。 class CsvImportForm(forms.Form): csv_upload = forms.FileField()\nこれで最低限のCSVからデータをアップロードできるかと思います。\n","permalink":"https://hirotoshimizu.github.io/posts/2021-07-19/","summary":"今回は restaurants というアプリを作成し進めていきます。\nCSVのファイルは管理画面のレストランの一覧画面 http://127.0.0.1:8000/admin/restaurants/restaurant/ からアップ。\nアプリの作成\npython manage.py startapp restaurants モデルは restaurant で作成。\nAdmin テンプレートの Override templatesフォルダは manage.py と同じ階層に作成。\ntemplates/admin/restaurants/restaurant/change_list.html を作成\n{% extends \u0026#39;admin/change_list.html\u0026#39; %} {% load static %} {% block content %} \u0026lt;a href=\u0026#34;upload-csv/\u0026#34;\u0026gt;Upload a csv file\u0026lt;/a\u0026gt; {{ block.super }} {% endblock %} {{ block.super }} は親のテンプレートコンテンツ。\nDjango change_list.html\nCustom Admin Page の作成 上記で作成したリンク先の upload-csv/ の URL を設定\nrestaurants/admin.py の RestaurantAdmin で get_urls()を設定。\ndef get_urls(self): urls = super().get_urls() new_urls = [ path(\u0026#39;upload-csv/\u0026#39;, self.","title":"Djnagoの管理画面からCSVファイルをアップしてデータ登録"},{"content":"PrimaryKeyRelatedField PrimaryKeyRelatedField を使用することでリレーションのあるテーブルのプライマリーキーを取得することが出来る。\nclass StatusSerializer(serializers.ModelSerializer): uri = serializers.SerializerMethodField(read_only=True) user = UserPublicSerializer(read_only=True) user_id = serializers.PrimaryKeyRelatedField(source=\u0026#39;user\u0026#39;, read_only=True) class Meta: model = Status fields = [ \u0026#39;uri\u0026#39;, \u0026#39;user_id\u0026#39;, \u0026#39;id\u0026#39;, \u0026#39;user\u0026#39;, \u0026#39;content\u0026#39;, \u0026#39;image\u0026#39; ] read_only_fields = [\u0026#39;user\u0026#39;]  \u0026quot;results\u0026quot;: [ { \u0026quot;uri\u0026quot;: \u0026quot;http://127.0.0.1:8000/api/status/1/\u0026quot;, \u0026quot;id\u0026quot;: 7, \u0026quot;user_id\u0026quot;: 1, \u0026quot;user\u0026quot;: { \u0026quot;id\u0026quot;: 1, \u0026quot;username\u0026quot;: \u0026quot;test\u0026quot;, \u0026quot;uri\u0026quot;: \u0026quot;http://127.0.0.1:8000/api/user/test/\u0026quot; }, \u0026quot;content\u0026quot;: \u0026quot;do some stuff here\u0026quot;, \u0026quot;image\u0026quot;: \u0026quot;http://127.0.0.1:8000/media/status/test/images.png\u0026quot; }, DRF ドキュメント\nHyperlinkedRelatedField PrimaryKeyRelatedField を使用することでリレーションのあるテーブルのターゲットのハイパーリンクを取得することが出来る。\nclass StatusSerializer(serializers.ModelSerializer): uri = serializers.SerializerMethodField(read_only=True) user = UserPublicSerializer(read_only=True) user_id = serializers.HyperlinkedRelatedField( source=\u0026#39;user\u0026#39;, # user foreign key lookup_field=\u0026#39;username\u0026#39;, view_name=\u0026#39;api-user:detail\u0026#39;, read_only=True ) class Meta: model = Status fields = [ \u0026#39;uri\u0026#39;, \u0026#39;id\u0026#39;, \u0026#39;user_id\u0026#39;, \u0026#39;user\u0026#39;, \u0026#39;content\u0026#39;, \u0026#39;image\u0026#39; ] read_only_fields = [\u0026#39;user\u0026#39;] view_name  lookup_field リレーション関係にあるターゲット上のフィールド。 参照する view の URL キーワード引数と一致する必要がある。 デフォルトではpk\n \u0026quot;results\u0026quot;: [ { \u0026quot;uri\u0026quot;: \u0026quot;http://127.0.0.1:8000/api/status/1/\u0026quot;, \u0026quot;id\u0026quot;: 7, \u0026quot;user_id\u0026quot;: \u0026quot;http://127.0.0.1:8000/api/user/test/\u0026quot;, \u0026quot;user\u0026quot;: { \u0026quot;id\u0026quot;: 1, \u0026quot;username\u0026quot;: \u0026quot;test\u0026quot;, \u0026quot;uri\u0026quot;: \u0026quot;http://127.0.0.1:8000/api/user/test/\u0026quot; }, \u0026quot;content\u0026quot;: \u0026quot;do some stuff here\u0026quot;, \u0026quot;image\u0026quot;: \u0026quot;http://127.0.0.1:8000/media/status/test/images.png\u0026quot; }, DRF ドキュメント\nHyperlinkedRelatedField PrimaryKeyRelatedField を使用することでリレーションのあるテーブルのターゲットのハイパーリンクを取得することが出来る。\nclass StatusSerializer(serializers.ModelSerializer): uri = serializers.SerializerMethodField(read_only=True) user_id = serializers.HyperlinkedRelatedField( source=\u0026#39;user\u0026#39;, # user foreign key lookup_field=\u0026#39;username\u0026#39;, view_name=\u0026#39;api-user:detail\u0026#39;, read_only=True ) user = serializers.SlugRelatedField(read_only=True, slug_field=\u0026#39;username\u0026#39;) class Meta: model = Status fields = [ \u0026#39;uri\u0026#39;, \u0026#39;user_id\u0026#39;, \u0026#39;id\u0026#39;, \u0026#39;user\u0026#39;, \u0026#39;content\u0026#39;, \u0026#39;image\u0026#39; ] read_only_fields = [\u0026#39;user\u0026#39;]  \u0026quot;results\u0026quot;: [ { \u0026quot;uri\u0026quot;: \u0026quot;http://127.0.0.1:8000/api/status/7/\u0026quot;, \u0026quot;user_id\u0026quot;: \u0026quot;http://127.0.0.1:8000/api/user/hshimizu/\u0026quot;, \u0026quot;id\u0026quot;: 7, \u0026quot;user\u0026quot;: \u0026quot;hshimizu\u0026quot;, \u0026quot;content\u0026quot;: \u0026quot;do some stuff here\u0026quot;, \u0026quot;image\u0026quot;: \u0026quot;http://127.0.0.1:8000/media/status/hshimizu/images.png\u0026quot; }, DRF ドキュメント\n","permalink":"https://hirotoshimizu.github.io/posts/2021-07-14/","summary":"PrimaryKeyRelatedField PrimaryKeyRelatedField を使用することでリレーションのあるテーブルのプライマリーキーを取得することが出来る。\nclass StatusSerializer(serializers.ModelSerializer): uri = serializers.SerializerMethodField(read_only=True) user = UserPublicSerializer(read_only=True) user_id = serializers.PrimaryKeyRelatedField(source=\u0026#39;user\u0026#39;, read_only=True) class Meta: model = Status fields = [ \u0026#39;uri\u0026#39;, \u0026#39;user_id\u0026#39;, \u0026#39;id\u0026#39;, \u0026#39;user\u0026#39;, \u0026#39;content\u0026#39;, \u0026#39;image\u0026#39; ] read_only_fields = [\u0026#39;user\u0026#39;]  \u0026quot;results\u0026quot;: [ { \u0026quot;uri\u0026quot;: \u0026quot;http://127.0.0.1:8000/api/status/1/\u0026quot;, \u0026quot;id\u0026quot;: 7, \u0026quot;user_id\u0026quot;: 1, \u0026quot;user\u0026quot;: { \u0026quot;id\u0026quot;: 1, \u0026quot;username\u0026quot;: \u0026quot;test\u0026quot;, \u0026quot;uri\u0026quot;: \u0026quot;http://127.0.0.1:8000/api/user/test/\u0026quot; }, \u0026quot;content\u0026quot;: \u0026quot;do some stuff here\u0026quot;, \u0026quot;image\u0026quot;: \u0026quot;http://127.0.0.1:8000/media/status/test/images.png\u0026quot; }, DRF ドキュメント\nHyperlinkedRelatedField PrimaryKeyRelatedField を使用することでリレーションのあるテーブルのターゲットのハイパーリンクを取得することが出来る。\nclass StatusSerializer(serializers.ModelSerializer): uri = serializers.SerializerMethodField(read_only=True) user = UserPublicSerializer(read_only=True) user_id = serializers.","title":"2021 07 13"},{"content":"Authenticating users authenticate(request=None, **credentials)\nauthenticate() は認証の承認のために使用する関数。 デフォルトでは keyword arguments で username と password で認証し、 User オブジェクトを返す。\nset_password(raw_password)\nパスワードをハッシュ化するのに使う。\n","permalink":"https://hirotoshimizu.github.io/posts/2021-07-12/","summary":"Authenticating users authenticate(request=None, **credentials)\nauthenticate() は認証の承認のために使用する関数。 デフォルトでは keyword arguments で username と password で認証し、 User オブジェクトを返す。\nset_password(raw_password)\nパスワードをハッシュ化するのに使う。","title":"2021 07 12"},{"content":"python での JSON の扱いについてわすれるのでメモ。\njson.dumps json.dumps()に入れた変数を JSON string に変換する。\n\u0026gt;\u0026gt;\u0026gt; import json \u0026gt;\u0026gt;\u0026gt; data = {'abc': 123} \u0026gt;\u0026gt;\u0026gt; type(data_json) \u0026lt;class 'str'\u0026gt; \u0026gt;\u0026gt;\u0026gt; data_json = json.dumps(data) \u0026gt;\u0026gt;\u0026gt; data_json '{\u0026quot;abc\u0026quot;: 123}' json.loads json.loads(JSON string) で python dictionary に型を変換する。\n\u0026gt;\u0026gt;\u0026gt; import json \u0026gt;\u0026gt;\u0026gt; data = {'abc': 123} \u0026gt;\u0026gt;\u0026gt; type(data_json) \u0026lt;class 'str'\u0026gt; \u0026gt;\u0026gt;\u0026gt; data_json = json.dumps(data) \u0026gt;\u0026gt;\u0026gt; data_json '{\u0026quot;abc\u0026quot;: 123}' \u0026gt;\u0026gt;\u0026gt; load_json = json.loads(data_json) \u0026gt;\u0026gt;\u0026gt; load_json {'abc': 123} \u0026gt;\u0026gt;\u0026gt; type(load_json) \u0026lt;class 'dict'\u0026gt; \u0026gt;\u0026gt;\u0026gt; load_json['abc'] 123 Django Rest Framework\nSerializerでの Create, Update, Delete \u0026quot;\u0026rdquo;\u0026rdquo; Create obj \u0026quot;\u0026rdquo;\u0026rdquo;\ndata = {'user': 1} serializer = StatusSerializer(data=data) serializer.is_valid() # is_validでデータを検証しないと .save() でエラーが出る serializer.save() \u0026quot;\u0026rdquo;\u0026rdquo; Update obj \u0026quot;\u0026rdquo;\u0026rdquo;\nobj = Status.objects.first() data = {'content': 'some new content', 'user': 1} update_serializer = StatusSerializer(obj, data=data) update_serializer.is_valid() update_serializer.save update_serializer.errors {'user': ['This field is required.']} \u0026quot;\u0026rdquo;\u0026rdquo; Delete obj \u0026quot;\u0026rdquo;\u0026rdquo;\nobj = Status.objects.last() obj.delete() Delete は Serializerを使わず、objectを取得して削除。\n","permalink":"https://hirotoshimizu.github.io/posts/2021-07-11/","summary":"python での JSON の扱いについてわすれるのでメモ。\njson.dumps json.dumps()に入れた変数を JSON string に変換する。\n\u0026gt;\u0026gt;\u0026gt; import json \u0026gt;\u0026gt;\u0026gt; data = {'abc': 123} \u0026gt;\u0026gt;\u0026gt; type(data_json) \u0026lt;class 'str'\u0026gt; \u0026gt;\u0026gt;\u0026gt; data_json = json.dumps(data) \u0026gt;\u0026gt;\u0026gt; data_json '{\u0026quot;abc\u0026quot;: 123}' json.loads json.loads(JSON string) で python dictionary に型を変換する。\n\u0026gt;\u0026gt;\u0026gt; import json \u0026gt;\u0026gt;\u0026gt; data = {'abc': 123} \u0026gt;\u0026gt;\u0026gt; type(data_json) \u0026lt;class 'str'\u0026gt; \u0026gt;\u0026gt;\u0026gt; data_json = json.dumps(data) \u0026gt;\u0026gt;\u0026gt; data_json '{\u0026quot;abc\u0026quot;: 123}' \u0026gt;\u0026gt;\u0026gt; load_json = json.loads(data_json) \u0026gt;\u0026gt;\u0026gt; load_json {'abc': 123} \u0026gt;\u0026gt;\u0026gt; type(load_json) \u0026lt;class 'dict'\u0026gt; \u0026gt;\u0026gt;\u0026gt; load_json['abc'] 123 Django Rest Framework","title":"2021 07 11"},{"content":"Web API the good parts\nエンドポイントの基本的な設計 覚えやすく、どんな機能を持つURIなのかがひと目でわかる  短くて入力しやすいURI 人間が読んで理解できるURL 大文字小文字が混在していないURI 改造しやすい（Hackableな）URI サーバー側のアーキテクチャが反映されていないURI  どんなソフトウェア、言語を利用しているのか。 ディレクトリやシステム構成がどうなっているのか。   ルールが統一されたURI  リソースにアクセスするための設計の注意点  複数形の名詞を利用する 利用する単語に気をつける スペースやエンコードを必要とする文字を使わない 単語をつなげる必要がある場合はハイフンを利用する  リソースの一覧取得のエンドポイントが検索を兼ねる。 絞り込み検索はパラメーターを設定する。\n検索に相対位置を利用する問題点 データ数が膨大になるとpageやoffsetを指定されていると「先頭から何件目か」を調べるために先頭から数を数える処理が行われるため遅くなる。 また、更新頻度が高いデータの場合データに不整合が生じる。\n絶対位置でデータを問題点 絶対位置指定とは、オフセットで相対位置を指定する代わりに、これまで取得した最後のデータのIDや時間を記録しておいて、「このIDより前のもの」や「この時刻より古いもの」と言った指定を行う方法。　配列とフォーマット オブジェクトで配列を包むメリット  レスポンスデータが何をしていものかがわかりやすくなる レスポンスデータをオブジェクトに統一することができる。 セキュリティ上のリスクを避けることができる  トップれべるが配列であるJSONは、JSONインジェクションに対するリスクが大きくなる。\n続きがある場合どうデータを返すべきか 例えば20件データを返すためには最大21件の取得を行ってみて、実際に21件取得できれば、 「hasNext」といった名前で結果を含めてあげれば良い。\n","permalink":"https://hirotoshimizu.github.io/posts/2021-07-09/","summary":"Web API the good parts\nエンドポイントの基本的な設計 覚えやすく、どんな機能を持つURIなのかがひと目でわかる  短くて入力しやすいURI 人間が読んで理解できるURL 大文字小文字が混在していないURI 改造しやすい（Hackableな）URI サーバー側のアーキテクチャが反映されていないURI  どんなソフトウェア、言語を利用しているのか。 ディレクトリやシステム構成がどうなっているのか。   ルールが統一されたURI  リソースにアクセスするための設計の注意点  複数形の名詞を利用する 利用する単語に気をつける スペースやエンコードを必要とする文字を使わない 単語をつなげる必要がある場合はハイフンを利用する  リソースの一覧取得のエンドポイントが検索を兼ねる。 絞り込み検索はパラメーターを設定する。\n検索に相対位置を利用する問題点 データ数が膨大になるとpageやoffsetを指定されていると「先頭から何件目か」を調べるために先頭から数を数える処理が行われるため遅くなる。 また、更新頻度が高いデータの場合データに不整合が生じる。\n絶対位置でデータを問題点 絶対位置指定とは、オフセットで相対位置を指定する代わりに、これまで取得した最後のデータのIDや時間を記録しておいて、「このIDより前のもの」や「この時刻より古いもの」と言った指定を行う方法。　配列とフォーマット オブジェクトで配列を包むメリット  レスポンスデータが何をしていものかがわかりやすくなる レスポンスデータをオブジェクトに統一することができる。 セキュリティ上のリスクを避けることができる  トップれべるが配列であるJSONは、JSONインジェクションに対するリスクが大きくなる。\n続きがある場合どうデータを返すべきか 例えば20件データを返すためには最大21件の取得を行ってみて、実際に21件取得できれば、 「hasNext」といった名前で結果を含めてあげれば良い。","title":"APIの設計"},{"content":"DRFでオブジェクトを作成したとき、 デフォルトで、 作成したオブジェクトを含むディクショナリー型でデータを返す。\nkeys() Pythonの組み込み関数。\nkeys() dict = {\u0026#34;A\u0026#34;: \u0026#34;Abalone\u0026#34;, \u0026#34;B\u0026#34;: \u0026#34;bluefin tuna\u0026#34;, \u0026#34;C\u0026#34;: \u0026#34;cod\u0026#34;} print(dict.keys()) \u0026gt;\u0026gt;\u0026gt;dict_keys([\u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;, \u0026#39;C\u0026#39;]) dict = {\u0026#34;A\u0026#34;: \u0026#34;Abalone\u0026#34;, \u0026#34;B\u0026#34;: \u0026#34;bluefin tuna\u0026#34;, \u0026#34;C\u0026#34;: \u0026#34;cod\u0026#34;} for key in dict.keys(): print(key) \u0026gt;\u0026gt;\u0026gt;A \u0026gt;\u0026gt;\u0026gt;B \u0026gt;\u0026gt;\u0026gt;C getattr Pythonの組み込み関数。\ngetattr(object, name[,default]) 第一引数に指定された object の値を返す。 第二引数の name は文字列である必要があり、文字列が object の属性の一つの名前であった場合、戻り値はその属性の値になる。\nquery_params request.GETと同義語。\nDRF では query_params を使用することを推奨。\nDRF ドキュメント\n","permalink":"https://hirotoshimizu.github.io/posts/2021-07-08/","summary":"DRFでオブジェクトを作成したとき、 デフォルトで、 作成したオブジェクトを含むディクショナリー型でデータを返す。\nkeys() Pythonの組み込み関数。\nkeys() dict = {\u0026#34;A\u0026#34;: \u0026#34;Abalone\u0026#34;, \u0026#34;B\u0026#34;: \u0026#34;bluefin tuna\u0026#34;, \u0026#34;C\u0026#34;: \u0026#34;cod\u0026#34;} print(dict.keys()) \u0026gt;\u0026gt;\u0026gt;dict_keys([\u0026#39;A\u0026#39;, \u0026#39;B\u0026#39;, \u0026#39;C\u0026#39;]) dict = {\u0026#34;A\u0026#34;: \u0026#34;Abalone\u0026#34;, \u0026#34;B\u0026#34;: \u0026#34;bluefin tuna\u0026#34;, \u0026#34;C\u0026#34;: \u0026#34;cod\u0026#34;} for key in dict.keys(): print(key) \u0026gt;\u0026gt;\u0026gt;A \u0026gt;\u0026gt;\u0026gt;B \u0026gt;\u0026gt;\u0026gt;C getattr Pythonの組み込み関数。\ngetattr(object, name[,default]) 第一引数に指定された object の値を返す。 第二引数の name は文字列である必要があり、文字列が object の属性の一つの名前であった場合、戻り値はその属性の値になる。\nquery_params request.GETと同義語。\nDRF では query_params を使用することを推奨。\nDRF ドキュメント","title":"2021 07 08"},{"content":"APIClient APIClientは Djang の Clientクラスを拡張したもの .get()、.post()、.put()、.pathch()、.delete()、.head()、.options()が利用可能。\n例\nfrom rest_framework.test import APIClient client = APIClient() client.post('/notes/', {'title': 'new idea'}, format='json') status from rest_framework import status 人間が読むことができるステータスコードを含む。 テストの際に理解が簡単 github\nrefresh_from_db() モデルのバリューをリフレッシュ使うのに使用。 このメソッドが引数なしで呼ばれると\n モデル上の遅延評価されない全てのフィールドはその時点でデータベース上に存在する値に更新されます。 キャッシュされたリレーションはリロードされたインスタンスに削除される。 Django ドキュメント  force_authenticate() テストする際に強制的に認証をリクエストする\nforce_authenticate(request, user=None, token=None)が呼ばれる時 user か token のいずれか、または両方を設定できる。\nGenericViewSet GenericViewSet クラスは GenericAPIView の継承し、get_object、get_queryset を提供し、デフォルトでは\nGenericViewSetクラスを使用するには、クラスをオーバーライドして、必要なmixinクラスをミックスインするか、アクションの実装を明示的に定義します。\nDRF ドキュメント\nModelSerializer ModelSerializerクラスはSerializer  class とモデルの一致するフィールドを自動で作成する\nModelSerializer クラスは Serializer と同じだが、 *モデルを基にフィールドを自動で作成する *unique_together のようなserializerのためのvalidatorを自動で作成する *デフォルトで .create() .update() 含む。\nmany=True Serializer クラスは serializing もしくは deserializing のリストオブジェクトを扱える。\nserialize する際に many=True を使うことで、queryset もしくはオブジェクトリストをserialize することが出来る。\nperform_create perform_create(self, serializer) は CreateModelMixinが呼ばれたときに新しいオブジェクトを保存する。\nPrimaryKeyRelatedField 例\nclass AlbumSerializer(serializers.ModelSerializer): tracks = serializers.PrimaryKeyRelatedField(many=True, read_only=True) class Meta: model = Album fields = ['album_name', 'artist', 'tracks'] { 'album_name': 'Undun', 'artist': 'The Roots', 'tracks': [ 89, 90, 91, ... ] } DRF ドキュメント\nModelViewSet ModelViewSet クラスは GenericAPIViewを継承。\nModelViewSet クラスは .list(), .retrieve(), .create(), .update(), partial_update(), .destroy()\nDRF ドキュメント\n","permalink":"https://hirotoshimizu.github.io/posts/django-rest-framework/","summary":"APIClient APIClientは Djang の Clientクラスを拡張したもの .get()、.post()、.put()、.pathch()、.delete()、.head()、.options()が利用可能。\n例\nfrom rest_framework.test import APIClient client = APIClient() client.post('/notes/', {'title': 'new idea'}, format='json') status from rest_framework import status 人間が読むことができるステータスコードを含む。 テストの際に理解が簡単 github\nrefresh_from_db() モデルのバリューをリフレッシュ使うのに使用。 このメソッドが引数なしで呼ばれると\n モデル上の遅延評価されない全てのフィールドはその時点でデータベース上に存在する値に更新されます。 キャッシュされたリレーションはリロードされたインスタンスに削除される。 Django ドキュメント  force_authenticate() テストする際に強制的に認証をリクエストする\nforce_authenticate(request, user=None, token=None)が呼ばれる時 user か token のいずれか、または両方を設定できる。\nGenericViewSet GenericViewSet クラスは GenericAPIView の継承し、get_object、get_queryset を提供し、デフォルトでは\nGenericViewSetクラスを使用するには、クラスをオーバーライドして、必要なmixinクラスをミックスインするか、アクションの実装を明示的に定義します。\nDRF ドキュメント\nModelSerializer ModelSerializerクラスはSerializer  class とモデルの一致するフィールドを自動で作成する\nModelSerializer クラスは Serializer と同じだが、 *モデルを基にフィールドを自動で作成する *unique_together のようなserializerのためのvalidatorを自動で作成する *デフォルトで .create() .update() 含む。","title":"Django Rest Framework"},{"content":"公開したいページのあるリポジトリの Settings をクリック。\nサイドナビの　Pages をクリック。\n公開したいブランチを選択\n事前にCNAMEでドメインを設定しておいて\n設定したドメインを適用\n","permalink":"https://hirotoshimizu.github.io/posts/host-a-website-on-github/","summary":"公開したいページのあるリポジトリの Settings をクリック。\nサイドナビの　Pages をクリック。\n公開したいブランチを選択\n事前にCNAMEでドメインを設定しておいて\n設定したドメインを適用","title":"GitHub Pages で静的サイトの公開方法"},{"content":"日々学んだ事を記録に残そうと始めました。\nWord Press や Django でブログを作成しようと思いましたが、\n速度やメンテナンスを楽にしたかったので、Hugoで作成。\n設定環境\n Win 10 WSL2 Ubuntu 20.04  1. Hugoのインストール Ubuntuでのインストール\nsudo apt-get install hugo 2. サイトの作成 hugo new site sitename sitename は自分の好きな名前に置き換えてください。\n3. テーマの追加 Hugo のテーマ から好きなテンプレートを選択。\nPaperMod を選択したので、 インストラクションに沿ってgit clone\ngit clone https://github.com/adityatelange/hugo-PaperMod themes/PaperMod --depth=1 4. コンテンツの追加 hugo new posts/my-first-post.md --- title: \u0026quot;My First Post\u0026quot; date: 2019-03-26T08:47:11+01:00 draft: true --- ※draft: false に変更で公開\n5. Hugo server を起動 hugo server ","permalink":"https://hirotoshimizu.github.io/posts/how-to-start-hugo/","summary":"日々学んだ事を記録に残そうと始めました。\nWord Press や Django でブログを作成しようと思いましたが、\n速度やメンテナンスを楽にしたかったので、Hugoで作成。\n設定環境\n Win 10 WSL2 Ubuntu 20.04  1. Hugoのインストール Ubuntuでのインストール\nsudo apt-get install hugo 2. サイトの作成 hugo new site sitename sitename は自分の好きな名前に置き換えてください。\n3. テーマの追加 Hugo のテーマ から好きなテンプレートを選択。\nPaperMod を選択したので、 インストラクションに沿ってgit clone\ngit clone https://github.com/adityatelange/hugo-PaperMod themes/PaperMod --depth=1 4. コンテンツの追加 hugo new posts/my-first-post.md --- title: \u0026quot;My First Post\u0026quot; date: 2019-03-26T08:47:11+01:00 draft: true --- ※draft: false に変更で公開\n5. Hugo server を起動 hugo server ","title":"Hugo の始め方"},{"content":"このサイトは日々学んだことをメモするためのサイトです。\n","permalink":"https://hirotoshimizu.github.io/about/","summary":"about","title":"about"},{"content":"","permalink":"https://hirotoshimizu.github.io/search/","summary":"search","title":"Search"}]