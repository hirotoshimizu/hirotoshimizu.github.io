[{"content":"APIClient APIClientは Djang の Clientクラスを拡張したもの .get()、.post()、.put()、.pathch()、.delete()、.head()、.options()が利用可能。\n例\nfrom rest_framework.test import APIClient client = APIClient() client.post('/notes/', {'title': 'new idea'}, format='json') status from rest_framework import status 人間が読むことができるステータスコードを含む。 テストの際に理解が簡単 github\nrefresh_from_db() モデルのバリューをリフレッシュ使うのに使用。 このメソッドが引数なしで呼ばれると\n モデル上の遅延評価されない全てのフィールドはその時点でデータベース上に存在する値に更新されます。 キャッシュされたリレーションはリロードされたインスタンスに削除される。 Django ドキュメント  force_authenticate() テストする際に強制的に認証をリクエストする\nforce_authenticate(request, user=None, token=None)が呼ばれる時 user か token のいずれか、または両方を設定できる。\nGenericViewSet GenericViewSet クラスは GenericAPIView の継承し、get_object、get_queryset を提供し、デフォルトでは\nGenericViewSetクラスを使用するには、クラスをオーバーライドして、必要なmixinクラスをミックスインするか、アクションの実装を明示的に定義します。\nDRF ドキュメント\nModelSerializer ModelSerializerクラスはSerializer  class とモデルの一致するフィールドを自動で作成する\nModelSerializer クラスは Serializer と同じだが、 *モデルを基にフィールドを自動で作成する *unique_together のようなserializerのためのvalidatorを自動で作成する *デフォルトで .create() .update() 含む。\nmany=True Serializer クラスは serializing もしくは deserializing のリストオブジェクトを扱える。\nserialize する際に many=True を使うことで、queryset もしくはオブジェクトリストをserialize することが出来る。\nperform_create perform_create(self, serializer) は CreateModelMixinが呼ばれたときに新しいオブジェクトを保存する。\nPrimaryKeyRelatedField 例\nclass AlbumSerializer(serializers.ModelSerializer): tracks = serializers.PrimaryKeyRelatedField(many=True, read_only=True) class Meta: model = Album fields = ['album_name', 'artist', 'tracks'] { 'album_name': 'Undun', 'artist': 'The Roots', 'tracks': [ 89, 90, 91, ... ] } DRF ドキュメント\nModelViewSet ModelViewSet クラスは GenericAPIViewを継承。\nModelViewSet クラスは .list(), .retrieve(), .create(), .update(), partial_update(), .destroy()\nDRF ドキュメント\n","permalink":"https://hirotoshimizu.github.io/posts/django-rest-framework/","summary":"APIClient APIClientは Djang の Clientクラスを拡張したもの .get()、.post()、.put()、.pathch()、.delete()、.head()、.options()が利用可能。\n例\nfrom rest_framework.test import APIClient client = APIClient() client.post('/notes/', {'title': 'new idea'}, format='json') status from rest_framework import status 人間が読むことができるステータスコードを含む。 テストの際に理解が簡単 github\nrefresh_from_db() モデルのバリューをリフレッシュ使うのに使用。 このメソッドが引数なしで呼ばれると\n モデル上の遅延評価されない全てのフィールドはその時点でデータベース上に存在する値に更新されます。 キャッシュされたリレーションはリロードされたインスタンスに削除される。 Django ドキュメント  force_authenticate() テストする際に強制的に認証をリクエストする\nforce_authenticate(request, user=None, token=None)が呼ばれる時 user か token のいずれか、または両方を設定できる。\nGenericViewSet GenericViewSet クラスは GenericAPIView の継承し、get_object、get_queryset を提供し、デフォルトでは\nGenericViewSetクラスを使用するには、クラスをオーバーライドして、必要なmixinクラスをミックスインするか、アクションの実装を明示的に定義します。\nDRF ドキュメント\nModelSerializer ModelSerializerクラスはSerializer  class とモデルの一致するフィールドを自動で作成する\nModelSerializer クラスは Serializer と同じだが、 *モデルを基にフィールドを自動で作成する *unique_together のようなserializerのためのvalidatorを自動で作成する *デフォルトで .create() .update() 含む。","title":"Django Rest Framework"},{"content":"公開したいページのあるリポジトリの Settings をクリック。\nサイドナビの　Pages をクリック。\n公開したいブランチを選択\n事前にCNAMEでドメインを設定しておいて\n設定したドメインを適用\n","permalink":"https://hirotoshimizu.github.io/posts/host-a-website-on-github/","summary":"公開したいページのあるリポジトリの Settings をクリック。\nサイドナビの　Pages をクリック。\n公開したいブランチを選択\n事前にCNAMEでドメインを設定しておいて\n設定したドメインを適用","title":"GitHub Pages で静的サイトの公開方法"},{"content":"日々学んだ事を記録に残そうと始めました。\nWord Press や Django でブログを作成しようと思いましたが、\n速度やメンテナンスを楽にしたかったので、Hugoで作成。\n設定環境\n Win 10 WSL2 Ubuntu 20.04  1. Hugoのインストール Ubuntuでのインストール\nsudo apt-get install hugo 2. サイトの作成 hugo new site sitename sitename は自分の好きな名前に置き換えてください。\n3. テーマの追加 Hugo のテーマ から好きなテンプレートを選択。\nPaperMod を選択したので、 インストラクションに沿ってgit clone\ngit clone https://github.com/adityatelange/hugo-PaperMod themes/PaperMod --depth=1 4. コンテンツの追加 hugo new posts/my-first-post.md --- title: \u0026quot;My First Post\u0026quot; date: 2019-03-26T08:47:11+01:00 draft: true --- ※draft: false に変更で公開\n5. Hugo server を起動 hugo server ","permalink":"https://hirotoshimizu.github.io/posts/how-to-start-hugo/","summary":"日々学んだ事を記録に残そうと始めました。\nWord Press や Django でブログを作成しようと思いましたが、\n速度やメンテナンスを楽にしたかったので、Hugoで作成。\n設定環境\n Win 10 WSL2 Ubuntu 20.04  1. Hugoのインストール Ubuntuでのインストール\nsudo apt-get install hugo 2. サイトの作成 hugo new site sitename sitename は自分の好きな名前に置き換えてください。\n3. テーマの追加 Hugo のテーマ から好きなテンプレートを選択。\nPaperMod を選択したので、 インストラクションに沿ってgit clone\ngit clone https://github.com/adityatelange/hugo-PaperMod themes/PaperMod --depth=1 4. コンテンツの追加 hugo new posts/my-first-post.md --- title: \u0026quot;My First Post\u0026quot; date: 2019-03-26T08:47:11+01:00 draft: true --- ※draft: false に変更で公開\n5. Hugo server を起動 hugo server ","title":"Hugo の始め方"},{"content":"このサイトは日々学んだことをメモするためのサイトです。\n","permalink":"https://hirotoshimizu.github.io/about/","summary":"about","title":"about"},{"content":"","permalink":"https://hirotoshimizu.github.io/search/","summary":"search","title":"Search"}]